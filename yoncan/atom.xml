<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HI~ 杨小样</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yoncan.github.io/"/>
  <updated>2017-01-17T14:00:43.844Z</updated>
  <id>https://yoncan.github.io/</id>
  
  <author>
    <name>杨小样</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>bash命令审计,记录终端操作指令</title>
    <link href="https://yoncan.github.io/blog/2017/01/bash-audit.html"/>
    <id>https://yoncan.github.io/blog/2017/01/bash-audit.html</id>
    <published>2017-01-16T15:28:47.000Z</published>
    <updated>2017-01-17T14:00:43.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们需要记录bash操作的指令,不管是root帐号,还是其他普通用户的帐号,都需要记录.<br>然后发送到远程端统一审计.<br>最终实现了以下的功能:</p>
<ul>
<li>记录操作指令到/var/log/messages, 对于普通用户同样支持.</li>
<li>根据key的指纹区分登录的用户.</li>
<li>记录了来源IP.</li>
<li>新增了bash.spec文件, 如果你需要自己下载源码,可以参照去修改打包.</li>
</ul>
<h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><p>系统: CentOS Linux release 7.2.1511 (Core)<br>bash版本: <a href="http://mirrors.ustc.edu.cn/gnu/bash/bash-4.4.tar.gz" target="_blank" rel="external">bash 4.4</a></p>
<a id="more"></a>
<h1 id="操作说明"><a href="#操作说明" class="headerlink" title="操作说明"></a>操作说明</h1><h2 id="修改bash-4-4-tar-gz-源码包"><a href="#修改bash-4-4-tar-gz-源码包" class="headerlink" title="修改bash-4.4.tar.gz 源码包"></a>修改bash-4.4.tar.gz 源码包</h2><h3 id="修改-config-top-h-文件"><a href="#修改-config-top-h-文件" class="headerlink" title="修改 config-top.h 文件"></a>修改 config-top.h 文件</h3><p>开启下面的两个注释选项,最终修改如下</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SSH_SOURCE_BASHRC</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSLOG_HISTORY</span></div></pre></td></tr></table></figure>
<h3 id="修改-bashhlist-c-文件"><a href="#修改-bashhlist-c-文件" class="headerlink" title="修改 bashhlist.c 文件"></a>修改 bashhlist.c 文件</h3><p>大约在文件的756行到777行, 我们注释 bash_syslog_history 函数,添加我们自己修改的,最终修改如下</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">void</div><div class="line">bash_syslog_history (line)</div><div class="line">     const char *line;</div><div class="line">&#123;</div><div class="line">  char trunc[SYSLOG_MAXLEN];</div><div class="line">  static int first = 1;</div><div class="line"></div><div class="line">  if (first)</div><div class="line">    &#123;</div><div class="line">      openlog (shell_name, OPENLOG_OPTS, SYSLOG_FACILITY);</div><div class="line">      first = 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  if (strlen(line) &lt; SYSLOG_MAXLEN)</div><div class="line">    syslog (SYSLOG_FACILITY|SYSLOG_LEVEL, "HISTORY: PID=%d UID=%d %s", getpid(), current_user.uid, line);</div><div class="line">  else</div><div class="line">    &#123;</div><div class="line">      strncpy (trunc, line, SYSLOG_MAXLEN);</div><div class="line">      trunc[SYSLOG_MAXLEN - 1] = '\0';</div><div class="line">      syslog (SYSLOG_FACILITY|SYSLOG_LEVEL, "HISTORY (TRUNCATED): PID=%d UID=%d %s", getpid(), current_user.uid, trunc);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">bash_syslog_history</span> <span class="params">(line)</span></div><div class="line">     <span class="keyword">const</span> <span class="keyword">char</span> *line;</div><div class="line">&#123;</div><div class="line">  <span class="keyword">char</span> trunc[SYSLOG_MAXLEN];</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> first = <span class="number">1</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *name_of_key;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *ssh_client_host;</div><div class="line"></div><div class="line">  name_of_key = getenv(<span class="string">"NAME_OF_KEY"</span>);</div><div class="line">  ssh_client_host = getenv(<span class="string">"SSH_CLIENT_HOST"</span>);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (first)</div><div class="line">    &#123;</div><div class="line">      openlog (shell_name, OPENLOG_OPTS, SYSLOG_FACILITY);</div><div class="line">      first = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">strlen</span>(line) &lt; SYSLOG_MAXLEN)</div><div class="line">    syslog (SYSLOG_FACILITY|SYSLOG_LEVEL, <span class="string">"HISTORY: PID=%d PPID=%d User=%s USER=%s HOST=%s CMD=%s"</span>, getpid(), getppid(), current_user.user_name, name_of_key, ssh_client_host, line);</div><div class="line">    </div><div class="line">  <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">      <span class="built_in">strncpy</span> (trunc, line, SYSLOG_MAXLEN);</div><div class="line">      trunc[SYSLOG_MAXLEN - <span class="number">1</span>] = <span class="string">'\0'</span>;</div><div class="line">      syslog (SYSLOG_FACILITY|SYSLOG_LEVEL, <span class="string">"HISTORY (TRUNCATED): PID=%d PPID=%d User=%s USER=%s HOST=%s CMD=%s"</span>, getpid(), getppid(), current_user.user_name, name_of_key, ssh_client_host, trunc);</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后重新打成tar.gz包, 注意的是,新包命名成<code>bash-audit-4.4.tar.gz</code>.因为这样是避免升级系统的<code>bash</code>, 我们将会把这个<code>bash</code>打包成<code>bash-audit</code>.<br>可以通过文章最后的链接去下载.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mv bash-4.4 bash-audit-4.4</div><div class="line">tar cf bash-audit-4.4.tar bash-audit-4.4</div><div class="line">gzip -c bash-audit-4.4.tar &gt; bash-audit-4.4.tar.gz</div></pre></td></tr></table></figure></p>
<h2 id="dot-bash-audit-sh-文件"><a href="#dot-bash-audit-sh-文件" class="headerlink" title="dot_bash-audit.sh 文件"></a>dot_bash-audit.sh 文件</h2><p>这个文件主要的作用是根据你的key指纹得到登录用户是谁, 其实最终的目的就是设置2个环境变量 <code>NAME_OF_KEY</code> 和 <code>SSH_CLIENT_HOST</code>.</p>
<ul>
<li>NAME_OF_KEY       : 记录的是登录用户的用户名</li>
<li>SSH_CLIENT_HOST   : 记录的是来源IP</li>
</ul>
<p>内容如下,你也可以根据自己的需求更改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># bash的命令记录</div><div class="line"># 主要是为了设置 NAME_OF_KEY 和 SSH_CLIENT_HOST 环境变量</div><div class="line"></div><div class="line">authorized_file=&quot;$HOME/.ssh/authorized_keys&quot;</div><div class="line">key_finger=&quot;/var/log/ssh_key_finger&quot;</div><div class="line">tmp_file=$(mktemp -uq /tmp/key.log.XXXXX)</div><div class="line"></div><div class="line"></div><div class="line"># sshd_log_file 值的设置在脚本末尾有说明</div><div class="line">sshd_log_file=&quot;/var/log/secure&quot;</div><div class="line"></div><div class="line">RSA_KEY=$(sudo /usr/bin/cat $&#123;sshd_log_file&#125;|awk -v p=&quot;$PPID&quot; &apos;/Found matching RSA key/ &amp;&amp; $0 ~ p &#123;f=$NF&#125;END&#123;print f&#125;&apos;)</div><div class="line"></div><div class="line"># 授权,普通用户可读写</div><div class="line">if [ &quot;$UID&quot; == &quot;0&quot; ];then  </div><div class="line">    ppid=$PPID</div><div class="line">else</div><div class="line">    #如果不是root用户，验证指纹的是另外一个进程号</div><div class="line">    ppid=`/bin/ps -ef | grep $PPID |grep &apos;sshd:&apos; |awk &apos;&#123;print $3&#125;&apos;`</div><div class="line">fi</div><div class="line"></div><div class="line"></div><div class="line"># 得到各个key的finger并放在$&#123;key_finger&#125;</div><div class="line">if [ -f &quot;$&#123;authorized_file&#125;&quot; ];then</div><div class="line">    while read line</div><div class="line">    do</div><div class="line">        echo &quot;$&#123;line&#125;&quot; &gt;$&#123;tmp_file&#125;</div><div class="line">        NAME=$(echo &quot;$&#123;line&#125;&quot;|awk &apos;&#123;print $3&#125;&apos;)</div><div class="line">        KEY_FING=$(ssh-keygen -l -f $&#123;tmp_file&#125;|awk &apos;&#123;print $2&#125;&apos;)</div><div class="line">        grep &quot;$KEY_FING $NAME&quot; $&#123;key_finger&#125; &gt;/dev/null 2&gt;&amp;1 || echo &quot;$KEY_FING $NAME&quot; &gt;&gt;$&#123;key_finger&#125;</div><div class="line">    done &lt; $&#123;authorized_file&#125;</div><div class="line">fi</div><div class="line">    </div><div class="line"></div><div class="line">#得到 NAME_OF_KEY 和 SSH_CLIENT_HOST</div><div class="line">NAME_OF_KEY=&apos;(null)&apos;</div><div class="line">if [ -n &quot;$RSA_KEY&quot; -a -f $&#123;key_finger&#125; ];then</div><div class="line">    NAME_OF_KEY=$(awk -v key=&quot;$RSA_KEY&quot; &apos;$1 == key&#123;print $NF&#125;&apos; $&#123;key_finger&#125;)</div><div class="line">fi</div><div class="line"></div><div class="line">SSH_CLIENT_HOST=$(echo &quot;$SSH_CLIENT&quot;|awk &apos;&#123;if($1 == &quot;::1&quot; || $1 ~ &quot;localhost&quot;)&#123;print &quot;127.0.0.1&quot;&#125;else&#123;print $1&#125;&#125;&apos;)</div><div class="line"></div><div class="line"># 参数设置为只读</div><div class="line">#readonly NAME_OF_KEY</div><div class="line">#readonly SSH_CLIENT_HOST</div><div class="line">export NAME_OF_KEY SSH_CLIENT_HOST</div><div class="line"></div><div class="line">[ -f $&#123;tmp_file&#125; ] &amp;&amp; /bin/rm $&#123;tmp_file&#125;</div><div class="line"></div><div class="line"></div><div class="line"># 远程登录执行时</div><div class="line"># 请添加到$HOME/.bashrc 或者 /etc/bashrc, &quot;# bash audit&quot;和末尾的 &quot;# end bash audit&quot; 也需要保留</div><div class="line">: &apos;</div><div class="line"># bash audit</div><div class="line">if [ -n &quot;$&#123;BASH_EXECUTION_STRING&#125;&quot; ];then</div><div class="line">    [ -f &quot;/etc/profile.d/bash-audit.sh&quot; ] &amp;&amp; source /etc/profile.d/bash-audit.sh</div><div class="line">    if [ -z &quot;$&#123;NAME_OF_KEY&#125;&quot; ];then</div><div class="line">        NAME_OF_KEY=&quot;(null)&quot;</div><div class="line">    fi</div><div class="line">    logger -t &quot;-bash[$&#123;PPID&#125;]&quot; -s &quot;HISTORY: PID=$&#123;PPID&#125; PPID=$&#123;PPID&#125; User=$&#123;USER&#125; USER=$&#123;NAME_OF_KEY&#125; HOST=$&#123;SSH_CLIENT_HOST&#125; CMD=$&#123;BASH_EXECUTION_STRING&#125;&quot; &gt;/dev/null 2&gt;&amp;1</div><div class="line">fi</div><div class="line"># end bash audit</div><div class="line">&apos;</div><div class="line"></div><div class="line"># 在 /etc/ssh/sshd_config 中设置</div><div class="line"># 如果 SyslogFacility 设置为默认的`AUTHPRIV`, 那就不需要更改</div><div class="line"># 请按下面的对应表设置 &apos;sshd_log_file&apos; 变量的值</div><div class="line"># AUTHPRIV: /var/log/secure</div><div class="line"># AUTH: /var/log/messages</div><div class="line"># 如果你设置了其他值, 请对应的修改脚本上的 &apos;sshd_log_file&apos; 变量的值, 同时把对应的权限添加到 /etc/sudoers.d/bash-audit</div><div class="line">:&lt;&lt;!</div><div class="line">SyslogFacility AUTHPRIV</div><div class="line">LogLevel VERBOSE</div><div class="line">!</div></pre></td></tr></table></figure></p>
<h2 id="dot-bash-audit-sudoer-文件"><a href="#dot-bash-audit-sudoer-文件" class="headerlink" title="dot_bash-audit.sudoer 文件"></a>dot_bash-audit.sudoer 文件</h2><p>设置sudo权限, 因为上面的 <code>dot_bash-audit.sh</code> 脚本中,需要通过查找 <code>/var/log/messages</code> 或者 <code>/var/log/secure</code> 文件中的指纹来获取登录的用户信息的.<br>但是这2个文件,普通账户都没有权限查看,所以为了也记录普通帐号的操作,需要普通帐号有权限查看这2个文件.<br>这个文件放置的位置在 <code>/etc/sudoers.d/bash-audit</code><br><strong>请注意:</strong>如果你的<code>sshd_config</code>中设置的 <code>SyslogFacility</code> 的值不在<code>AUTHPRIV</code>或者<code>AUTH</code>设备,那需要你自己修改下面的权限.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># bash-audit</div><div class="line"># bash审核的时候,普通用户没有权限查看日志的权限</div><div class="line"># 所以在这里配置sudo免密码查看.</div><div class="line"># 把这个文件放置在 /etc/sudoers.d/bash-audit</div><div class="line"></div><div class="line">## BashAudit</div><div class="line">Cmnd_Alias BASHAUDIT = /usr/bin/cat /var/log/messages, /usr/bin/cat /var/log/secure, /usr/bin/grep /var/log/messages, /usr/bin/grep /var/log/secure</div><div class="line"></div><div class="line">Defaults    	!requiretty</div><div class="line"></div><div class="line">ALL	localhost=(ALL)	NOPASSWD: BASHAUDIT</div></pre></td></tr></table></figure></p>
<h2 id="bash-audit-spec-文件"><a href="#bash-audit-spec-文件" class="headerlink" title="bash-audit.spec 文件"></a>bash-audit.spec 文件</h2><p>提供了一个模板,最终安装的位置在 <code>/usr/local/bash-audit-4.4</code>, 注意安装的时候,有修改帐号的 shell 的.如果你不需要,请取消.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">%define _prefix /usr/local/bash-audit-4.4</div><div class="line"></div><div class="line">Name: bash-audit</div><div class="line">Version: 4.4</div><div class="line">Release: 1%&#123;?dist&#125;</div><div class="line">Summary: The GNU Bourne Again shell	</div><div class="line">Group: System Environment/Shells</div><div class="line">License: GPLv3+	</div><div class="line">URL: https://yoncan.github.io</div><div class="line">Packager: kaiser</div><div class="line">BuildRoot: %(mktemp -ud %&#123;_tmppath&#125;/%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;-XXXXXX)</div><div class="line">Source0: bash-audit-%&#123;version&#125;.tar.gz</div><div class="line">Source1: dot_bash-audit.sh</div><div class="line">Source2: dot_bash-audit.sudoer</div><div class="line"></div><div class="line">#BuildRequires:	</div><div class="line">#Requires:	</div><div class="line"></div><div class="line">%description</div><div class="line">The GNU Bourne Again shell (Bash) is a shell or command language</div><div class="line">interpreter that is compatible with the Bourne shell (sh). Bash</div><div class="line">incorporates useful features from the Korn shell (ksh) and the C shell</div><div class="line">(csh). Most sh scripts can be run by bash without modification.</div><div class="line"></div><div class="line">%prep</div><div class="line">%setup -q -n %&#123;name&#125;-%&#123;version&#125;</div><div class="line"></div><div class="line"></div><div class="line">%build</div><div class="line">%configure --prefix=%&#123;_prefix&#125; --with-bash-malloc=no --with-afs</div><div class="line">make %&#123;?_smp_mflags&#125;</div><div class="line"></div><div class="line"></div><div class="line">%install</div><div class="line"># clear buildroot</div><div class="line">[ &quot;%&#123;buildroot&#125;&quot; != &quot;/&quot; ] &amp;&amp; rm -rf %&#123;buildroot&#125;</div><div class="line">make install DESTDIR=%&#123;buildroot&#125;</div><div class="line"></div><div class="line"># copy file</div><div class="line">mkdir -p %&#123;buildroot&#125;/etc/profile.d</div><div class="line">install -c -m644 %SOURCE1 %&#123;buildroot&#125;/etc/profile.d/bash-audit.sh</div><div class="line"></div><div class="line"># create key finger</div><div class="line">mkdir -p %&#123;buildroot&#125;/var/log</div><div class="line">touch %&#123;buildroot&#125;/var/log/ssh_key_finger</div><div class="line">chmod 666 %&#123;buildroot&#125;/var/log/ssh_key_finger</div><div class="line"></div><div class="line"># copy sudoers</div><div class="line">mkdir -p %&#123;buildroot&#125;/etc/sudoers.d</div><div class="line">install -c -m644 %SOURCE2 %&#123;buildroot&#125;/etc/sudoers.d/bash-audit</div><div class="line"></div><div class="line">%post</div><div class="line"></div><div class="line">grep &quot;%&#123;_prefix&#125;/bin/bash&quot; /etc/shells || echo &quot;%&#123;_prefix&#125;/bin/bash&quot; &gt;&gt;/etc/shells</div><div class="line">sed -i &quot;s#\(SHELL=\).*#\1%&#123;_prefix&#125;/bin/bash#&quot; /etc/default/useradd</div><div class="line"></div><div class="line">for u in `awk -F &apos;:&apos;  &apos;$NF == &quot;/bin/bash&quot; || $NF == &quot;/bin/sh&quot; || $NF ~ &quot;bash-audit&quot;  &#123;print $1&#125;&apos; /etc/passwd`</div><div class="line">do</div><div class="line">    chsh -s %&#123;_prefix&#125;/bin/bash $u</div><div class="line">done</div><div class="line"></div><div class="line"></div><div class="line">if ! `grep &apos;# bash audit&apos; /etc/bashrc &gt;/dev/null 2&gt;&amp;1`;then</div><div class="line">cat &gt;&gt;/etc/bashrc&lt;&lt;EOF</div><div class="line"># bash audit</div><div class="line">if [ -n &quot;\$&#123;BASH_EXECUTION_STRING&#125;&quot; ];then</div><div class="line">    [ -f &quot;/etc/profile.d/bash-audit.sh&quot; ] &amp;&amp; source /etc/profile.d/bash-audit.sh</div><div class="line">    if [ -z &quot;\$&#123;NAME_OF_KEY&#125;&quot; ];then</div><div class="line">        NAME_OF_KEY=&apos;(null)&apos;</div><div class="line">    fi</div><div class="line">    logger -t &quot;-bash[\$&#123;PPID&#125;]&quot; -s &quot;HISTORY: PID=\$&#123;PPID&#125; PPID=\$&#123;PPID&#125; User=\$&#123;USER&#125; USER=\$&#123;NAME_OF_KEY&#125; HOST=\$&#123;SSH_CLIENT_HOST&#125; CMD=\$&#123;BASH_EXECUTION_STRING&#125;&quot; &gt;/dev/null 2&gt;&amp;1</div><div class="line">fi</div><div class="line"># end bash audit</div><div class="line">EOF</div><div class="line"></div><div class="line">fi</div><div class="line"></div><div class="line"></div><div class="line">%preun</div><div class="line">for u in `awk -F &apos;:&apos;  &apos;$NF ~ &quot;bash-audit&quot; &#123;print $1&#125; &apos; /etc/passwd`</div><div class="line">do</div><div class="line">    chsh -s /bin/bash $u</div><div class="line">done</div><div class="line"></div><div class="line">#[ -f &quot;/etc/profile.d/bash-audit.sh&quot; ] &amp;&amp; rm /etc/profile.d/bash-audit.sh</div><div class="line"></div><div class="line">if `grep &apos;^# bash audit&apos; /etc/bashrc &gt;/dev/null 2&gt;&amp;1`;then</div><div class="line">    sed -i &quot;/# bash audit/,/# end bash audit/ d&quot; /etc/bashrc</div><div class="line">fi</div><div class="line"></div><div class="line">sed -i &quot;s#\(SHELL=\).*#\1/bin/bash#&quot; /etc/default/useradd</div><div class="line">sed -i &quot;/bash-audit/d&quot; /etc/shells</div><div class="line"></div><div class="line"></div><div class="line">%clean</div><div class="line">[ &quot;$RPM_BUILD_ROOT&quot; != &quot;/&quot; ] &amp;&amp; rm -rf &quot;$RPM_BUILD_ROOT&quot;</div><div class="line">rm -rf $RPM_BUILD_DIR/%&#123;name&#125;-%&#123;version&#125;</div><div class="line"></div><div class="line">%files</div><div class="line">%defattr(-,root,root,-)</div><div class="line">%&#123;_prefix&#125;</div><div class="line">/etc/profile.d/bash-audit.sh</div><div class="line">/var/log/ssh_key_finger</div><div class="line">/etc/sudoers.d/bash-audit</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">#%doc %&#123;prefix&#125;/docs</div><div class="line"></div><div class="line"></div><div class="line">%changelog</div><div class="line">* Fri Jan 06 2017 YangCan &lt;yoncan@qq.com&gt; - 4.4.0-1</div><div class="line">- Rebase to bash-4.4</div><div class="line">  Resolves: #1376609</div></pre></td></tr></table></figure></p>
<p>使用下面的指令打包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpmbuild -ba --clean  bash-audit-4.4.spec</div></pre></td></tr></table></figure></p>
<p>最终应该会生成如下包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost SOURCES]# ll /root/rpmbuild/RPMS/x86_64/*          </div><div class="line">-rw-r--r--. 1 root root 1715508 Jan 16 18:22 /root/rpmbuild/RPMS/x86_64/bash-audit-4.4-1.el7.centos.x86_64.rpm</div><div class="line">-rw-r--r--. 1 root root 1741176 Jan 16 18:22 /root/rpmbuild/RPMS/x86_64/bash-audit-debuginfo-4.4-1.el7.centos.x86_64.rpm</div></pre></td></tr></table></figure></p>
<h2 id="修改-etc-ssh-sshd-config-文件"><a href="#修改-etc-ssh-sshd-config-文件" class="headerlink" title="修改 /etc/ssh/sshd_config 文件"></a>修改 /etc/ssh/sshd_config 文件</h2><p>修改的值如下,记得修改之后,重启sshd服务.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SyslogFacility AUTHPRIV</div><div class="line">LogLevel VERBOSE</div></pre></td></tr></table></figure></p>
<blockquote><p>SyslogFacility 这个值影响了用户登录时,sshd产生的日志信息的位置,日志的位置变动了,同样的<code>/etc/profile.d/bash-audit.sh</code>脚本中<code>sshd_log_file</code>的变量也需要同样的修改.<br>请按下面的对应表设置 ‘sshd_log_file’ 变量的值</p>
<ul>
<li>AUTHPRIV:     /var/log/secure</li>
<li>AUTH:         /var/log/messages<br>如果你设置了其他值, 请对应的修改脚本上的 ‘sshd_log_file’ 变量的值, 同时把对应的权限添加到 /etc/sudoers.d/bash-audit</li>
</ul>
</blockquote>
<h1 id="如何获取"><a href="#如何获取" class="headerlink" title="如何获取"></a>如何获取</h1><p>代码并没托管到github, 可以通过下面的点击下载</p>
<ul>
<li>所有的代码包<a href="https://yoncan.github.io/assert/down/bash-audit-4.4.zip">bash-audit-4.4.zip</a></li>
<li>打好的rpm包<a href="https://yoncan.github.io/assert/down/bash-audit-4.4-1.el7.centos.x86_64.rpm">bash-audit-4.4-1.el7.centos.x86_64.rpm</a></li>
</ul>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>最终可以得到的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># tail -f /var/log/messages</div><div class="line">Jan 16 19:11:21 localhost -bash[22053]: HISTORY: PID=22053 PPID=22050 User=root USER=ycan@kaiser HOST=192.168.10.1 CMD=df -h</div><div class="line">Jan 16 19:11:25 localhost -bash[22053]: HISTORY: PID=22053 PPID=22050 User=root USER=ycan@kaiser HOST=192.168.10.1 CMD=ps aux</div></pre></td></tr></table></figure></p>
<p>你可以把这个结果发送到远程端.</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://my.oschina.net/liujen/blog/78441" target="_blank" rel="external">完善linux bash操作记录审核方法</a></li>
<li><a href="http://mattshma.github.io/2015/11/04/rpm%E6%89%93%E5%8C%85/" target="_blank" rel="external">RPM打包</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们需要记录bash操作的指令,不管是root帐号,还是其他普通用户的帐号,都需要记录.&lt;br&gt;然后发送到远程端统一审计.&lt;br&gt;最终实现了以下的功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录操作指令到/var/log/messages, 对于普通用户同样支持.&lt;/li&gt;
&lt;li&gt;根据key的指纹区分登录的用户.&lt;/li&gt;
&lt;li&gt;记录了来源IP.&lt;/li&gt;
&lt;li&gt;新增了bash.spec文件, 如果你需要自己下载源码,可以参照去修改打包.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;环境介绍&quot;&gt;&lt;a href=&quot;#环境介绍&quot; class=&quot;headerlink&quot; title=&quot;环境介绍&quot;&gt;&lt;/a&gt;环境介绍&lt;/h1&gt;&lt;p&gt;系统: CentOS Linux release 7.2.1511 (Core)&lt;br&gt;bash版本: &lt;a href=&quot;http://mirrors.ustc.edu.cn/gnu/bash/bash-4.4.tar.gz&quot;&gt;bash 4.4&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="bash" scheme="https://yoncan.github.io/categories/bash/"/>
    
    
      <category term="bash" scheme="https://yoncan.github.io/tags/bash/"/>
    
      <category term="bash audit" scheme="https://yoncan.github.io/tags/bash-audit/"/>
    
  </entry>
  
  <entry>
    <title>flask signal信号机制</title>
    <link href="https://yoncan.github.io/blog/2017/01/flask-signal.html"/>
    <id>https://yoncan.github.io/blog/2017/01/flask-signal.html</id>
    <published>2017-01-10T14:38:58.000Z</published>
    <updated>2017-01-17T14:00:43.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>参考: <a href="https://dormousehole.readthedocs.io/en/latest/signals.html" target="_blank" rel="external">信号</a><br>什么是信号？当核心框架的其他地方或另一个 Flask 扩展中发生动作时，信号通过发送 通知来帮助你解耦应用。简言之，信号允许某个发送者通知接收者有事情发生了。</p>
<hr>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>使用信号,分四个步骤处理</p>
<ol>
<li>创建一个信号</li>
<li>创建接收到信号之后处理的回调函数</li>
<li>信号绑定回调函数</li>
<li>发送消息</li>
</ol>
<a id="more"></a>
<h2 id="创建一个信号"><a href="#创建一个信号" class="headerlink" title="创建一个信号"></a>创建一个信号</h2><p>这里创建了一个<code>mail_send</code>的信号<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask.signals <span class="keyword">import</span> Namespace</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, current_app</div><div class="line"></div><div class="line"></div><div class="line">my_signals = Namespace()</div><div class="line">mail_send = my_signals.signal(<span class="string">'mail-send'</span>)</div><div class="line"></div><div class="line">app = Flask(__name__)</div></pre></td></tr></table></figure></p>
<h2 id="创建接收到信号之后处理的回调函数"><a href="#创建接收到信号之后处理的回调函数" class="headerlink" title="创建接收到信号之后处理的回调函数"></a>创建接收到信号之后处理的回调函数</h2><p>回调函数为<code>mail_send_callback()</code>, 这里接收一个email的数据参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mail_send_callback</span><span class="params">(sender, email, **extra)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :param sender: 发送者</div><div class="line">    :param email: 数据参数email</div><div class="line">    :param extra:</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    <span class="keyword">print</span> <span class="string">'Got email: %s'</span> % email</div></pre></td></tr></table></figure></p>
<h2 id="信号绑定回调函数-connect"><a href="#信号绑定回调函数-connect" class="headerlink" title="信号绑定回调函数 .connect()"></a>信号绑定回调函数 <code>.connect()</code></h2><p>需要把信号绑定回调函数,用于在接收信号之后的处理步骤.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mail_send.connect(mail_send_callback, app)</div><div class="line"></div><div class="line"><span class="comment"># 该方法的第一个参数是当信号发出时所调用的函数。第二个参数是可选参数，定义一个发送者。 使用 disconnect() 方法可以退订信号</span></div><div class="line"><span class="comment"># mail_sent_callback 为receiver, 一般是一个callback函数</span></div><div class="line"><span class="comment"># app: 为sender 发送者</span></div></pre></td></tr></table></figure>
<h2 id="发送消息-send"><a href="#发送消息-send" class="headerlink" title="发送消息 .send()"></a>发送消息 <code>.send()</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> current_app</div><div class="line"></div><div class="line">mail_send.send(current_app._get_current_object(), email=email)</div><div class="line"></div><div class="line"><span class="comment"># 它的第一个 参数是一个发送者`current_app._get_current_object()`，</span></div><div class="line">其他参数要发送给订阅者的东西，其他参数是可选的,email=email为参数</div></pre></td></tr></table></figure>
<hr>
<h1 id="完整的测试代码"><a href="#完整的测试代码" class="headerlink" title="完整的测试代码"></a>完整的测试代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># Author: YangCan</span></div><div class="line"><span class="comment"># Email: yoncan@qq.com</span></div><div class="line"><span class="comment"># About: https://yoncan.github.io</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, current_app, request, jsonify</div><div class="line"><span class="keyword">from</span> flask.signals <span class="keyword">import</span> Namespace</div><div class="line"></div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">my_signals = Namespace()</div><div class="line"></div><div class="line">mail_send = my_signals.signal(<span class="string">'mail-sent'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mail_send_callback</span><span class="params">(sender, email, **extra)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :param sender:</div><div class="line">    :param email:</div><div class="line">    :param extra:</div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    print(<span class="string">"sent mail to %s"</span>, email)</div><div class="line"></div><div class="line"></div><div class="line">mail_send.connect(mail_send_callback, app)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_send_mail</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :return:</div><div class="line">    """</div><div class="line">    req_data = request.get_json()</div><div class="line"></div><div class="line">    email = req_data.get(<span class="string">'email'</span>, <span class="keyword">None</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 发送signal</span></div><div class="line">    mail_send.send(current_app._get_current_object(), email=email)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> jsonify(&#123;</div><div class="line">        <span class="string">'code'</span>: <span class="number">0</span>,</div><div class="line">        <span class="string">'msg'</span>: <span class="string">'send to &#123;0&#125; ok '</span>.format(email)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">8000</span>, debug=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p>命令行测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># curl -H &quot;Content-Type: application/json&quot; -XPOST    http://192.168.10.1:8000/ -d &apos;&#123;&quot;email&quot;: &quot;yangcan@local&quot;&#125;&apos;</div><div class="line">&#123;</div><div class="line">  &quot;code&quot;: 0, </div><div class="line">  &quot;msg&quot;: &quot;send to yangcan@local ok &quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在服务端,可以看到的输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(&apos;sent mail to %s&apos;, u&apos;yangcan@local&apos;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;参考: &lt;a href=&quot;https://dormousehole.readthedocs.io/en/latest/signals.html&quot;&gt;信号&lt;/a&gt;&lt;br&gt;什么是信号？当核心框架的其他地方或另一个 Flask 扩展中发生动作时，信号通过发送 通知来帮助你解耦应用。简言之，信号允许某个发送者通知接收者有事情发生了。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;案例&quot;&gt;&lt;a href=&quot;#案例&quot; class=&quot;headerlink&quot; title=&quot;案例&quot;&gt;&lt;/a&gt;案例&lt;/h1&gt;&lt;p&gt;使用信号,分四个步骤处理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个信号&lt;/li&gt;
&lt;li&gt;创建接收到信号之后处理的回调函数&lt;/li&gt;
&lt;li&gt;信号绑定回调函数&lt;/li&gt;
&lt;li&gt;发送消息&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="flask" scheme="https://yoncan.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://yoncan.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>flask route支持正则</title>
    <link href="https://yoncan.github.io/blog/2017/01/flask-url-regex.html"/>
    <id>https://yoncan.github.io/blog/2017/01/flask-url-regex.html</id>
    <published>2017-01-10T08:51:19.000Z</published>
    <updated>2017-01-10T13:45:07.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>flask跟web.py差别挺大的，尤其是在路由管理这块。web.py把所有的路由都集中在一起，我比较喜欢这种方式。最近用flask，发现@app.route(‘<url>‘)中URL只支持string、int、float、path 4种类型，并不支持正则.</url></p>
<h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><p>通过运行如下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = Flask(__name__)</div><div class="line">    pprint(app.url_map.converters)</div></pre></td></tr></table></figure></p>
<p>可以获取Flask默认支持的转换器</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;'any': &lt;class 'werkzeug.routing.AnyConverter'&gt;,</div><div class="line"> 'default': &lt;class 'werkzeug.routing.UnicodeConverter'&gt;,</div><div class="line"> 'float': &lt;class 'werkzeug.routing.FloatConverter'&gt;,</div><div class="line"> 'int': &lt;class 'werkzeug.routing.IntegerConverter'&gt;,</div><div class="line"> 'path': &lt;class 'werkzeug.routing.PathConverter'&gt;,</div><div class="line"> 'string': &lt;class 'werkzeug.routing.UnicodeConverter'&gt;,</div><div class="line"> 'uuid': &lt;class 'werkzeug.routing.UUIDConverter'&gt;&#125;</div></pre></td></tr></table></figure>
<p>那如何创建一个新的路由解析转化器呢？<br>在Flask的app.py里有个简单的例子,这个例子是创建了一个regex类型的路由转换器：</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># Author: Ycan</span></div><div class="line"><span class="comment"># About: http://www.ehco.me/</span></div><div class="line"><span class="comment"># Email: yoncan@qq.com</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegexConverter</span><span class="params">(BaseConverter)</span>:</span></div><div class="line">    <span class="string">""" 支持正则的路由判断</span></div><div class="line"></div><div class="line">    Example::</div><div class="line"></div><div class="line">        Rule('/&lt;regex(r"\d+"):lang_code&gt;')</div><div class="line"></div><div class="line">    :param map: the :class:`Map`.</div><div class="line"></div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, map, *args)</span>:</span></div><div class="line">        BaseConverter.__init__(self, map)</div><div class="line">        self.regex = args[<span class="number">0</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">return</span> value</div><div class="line"></div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.url_map.converters[<span class="string">'regex'</span>] = RegexConverter</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/test/&lt;regex(r"[a-z]\d+$"):user&gt;', methods=['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_regex_route</span><span class="params">(user)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :param user:</div><div class="line">    :return:</div><div class="line"></div><div class="line">    url请求 /test/a10001</div><div class="line">    result: user=a10001</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> <span class="string">'get user: &#123;0&#125;'</span>.format(user)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Flask（其实是Werkzeug）使用Converter把URL中特殊部分（<code>&lt;regex(r&quot;[a-z]\d+$&quot;):user&gt;</code>）转换为Python变量，通用格式是<converter(args):var_name>。在这个例子中，一个叫regex的converter把URL中相应字段转换为view()中的user变量。</converter(args):var_name></p>
<p>因此，converter的regex就是用来判断这串字符是否符合转换格式，ok就转换，否则跳过。对于IntegerConverter来说，”abc”显然无能为力。也就是说，其实Werkzeug的路由本来就支持用正则表达式。string、int、float等都是从它派生出来的（可以看看IntegerConverter等built-in Converter的regex）。</p>
<p>至于为什么不显式地支持，我猜可能是因为正则表达式不容易写好，buggy。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;flask跟web.py差别挺大的，尤其是在路由管理这块。web.py把所有的路由都集中在一起，我比较喜欢这种方式。最近用flask，发现@app.route(‘&lt;URL&gt;‘)中URL只支持string、int、float、path 4种类型，并不支持正则.&lt;/p&gt;
&lt;h1 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerlink&quot; title=&quot;方案&quot;&gt;&lt;/a&gt;方案&lt;/h1&gt;&lt;p&gt;通过运行如下代码&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Flask&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pprint &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pprint&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    app = Flask(__name__)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    pprint(app.url_map.converters)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以获取Flask默认支持的转换器&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&#39;any&#39;: &amp;lt;class &#39;werkzeug.routing.AnyConverter&#39;&amp;gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &#39;default&#39;: &amp;lt;class &#39;werkzeug.routing.UnicodeConverter&#39;&amp;gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &#39;float&#39;: &amp;lt;class &#39;werkzeug.routing.FloatConverter&#39;&amp;gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &#39;int&#39;: &amp;lt;class &#39;werkzeug.routing.IntegerConverter&#39;&amp;gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &#39;path&#39;: &amp;lt;class &#39;werkzeug.routing.PathConverter&#39;&amp;gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &#39;string&#39;: &amp;lt;class &#39;werkzeug.routing.UnicodeConverter&#39;&amp;gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &#39;uuid&#39;: &amp;lt;class &#39;werkzeug.routing.UUIDConverter&#39;&amp;gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那如何创建一个新的路由解析转化器呢？&lt;br&gt;在Flask的app.py里有个简单的例子,这个例子是创建了一个regex类型的路由转换器：&lt;/p&gt;
    
    </summary>
    
      <category term="flask" scheme="https://yoncan.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://yoncan.github.io/tags/flask/"/>
    
      <category term="regex" scheme="https://yoncan.github.io/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>rundeck使用的一些注意事项</title>
    <link href="https://yoncan.github.io/blog/2017/01/rundeck-notice.html"/>
    <id>https://yoncan.github.io/blog/2017/01/rundeck-notice.html</id>
    <published>2017-01-10T07:06:58.000Z</published>
    <updated>2017-01-17T14:00:43.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录rundeck在使用的过程中的一些注意事项.</p>
<h1 id="SSH端口改变了怎么处理"><a href="#SSH端口改变了怎么处理" class="headerlink" title="SSH端口改变了怎么处理?"></a>SSH端口改变了怎么处理?</h1><p>我们知道rundeck是基于ssh的,而rundeck提供的配置文件中,没有配置ssh端口的选项.</p>
<ul>
<li><strong>我们可以在新建项目的时候,在前端的配置文件中按如下的配置</strong></li>
</ul>
<p>“Default Node Executor” 选择 “Script Execution”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p 11022 -i /etc/rundeck/.sshkeys/publisher -o &quot;StrictHostKeyChecking no&quot; $&#123;node.username&#125;@$&#123;node.hostname&#125; $&#123;exec.command&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><img src="/assert/images/2017-01-10-rundeck-notice/node-script-execution.jpg" alt="ssh执行器"></p>
<p>“Default Node File Copier” 选择 “Script Execution”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync -rvzt --exclude=&apos;.svn/&apos; --exclude=&apos;.git/&apos; --exclude=&apos;.idea/&apos; -e &apos;ssh -p 11022 -i /etc/rundeck/.sshkeys/publisher -o StrictHostKeyChecking=false&apos; $&#123;file-copy.file&#125;  $&#123;node.username&#125;@$&#123;node.hostname&#125;:$&#123;file-copy.destination&#125;</div></pre></td></tr></table></figure></p>
<p><img src="/assert/images/2017-01-10-rundeck-notice/node-filecopy-script-execution.jpg" alt="ssh文件拷贝执行器"></p>
<ul>
<li><strong>如果项目已经配置好了,也可以在对应项目的<code>etc/project.properties</code>文件中定义</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Tue Jan 10 15:16:11 CST 2017</span></div><div class="line"><span class="comment">#edit below</span></div><div class="line"></div><div class="line">project.description=我的第一个项目</div><div class="line">project.name=my_first_project</div><div class="line">project.nodeCache.delay=<span class="number">30</span></div><div class="line">project.nodeCache.enabled=true</div><div class="line">project.ssh-keypath=/etc/rundeck/.sshkeys/publisher</div><div class="line">resources.source<span class="number">.1</span>.config.file=/data/rundeck/projects/ad.uu66.com/etc/resources.xml</div><div class="line">resources.source<span class="number">.1</span>.config.format=resourcexml</div><div class="line">resources.source<span class="number">.1</span>.config.generateFileAutomatically=true</div><div class="line">resources.source<span class="number">.1</span>.config.includeServerNode=true</div><div class="line">resources.source<span class="number">.1</span>.config.requireFileExists=false</div><div class="line">resources.source<span class="number">.1</span>.type=file</div><div class="line"><span class="comment"># file copy define</span></div><div class="line">service.FileCopier.default.provider=script-copy</div><div class="line">plugin.script-copy.default.command=rsync -rvzt --exclude\=<span class="string">'.svn/'</span> --exclude\=<span class="string">'.git/'</span> --exclude\=<span class="string">'.idea/'</span> -e <span class="string">'ssh -p 11022 -i /etc/rundeck/.sshkeys/publisher -o StrictHostKeyChecking\=false'</span> $&#123;file-copy.file&#125;  $&#123;node.username&#125;@$&#123;node.hostname&#125;\:$&#123;file-copy.destination&#125;</div><div class="line">plugin.script-copy.default.shell=bash -c</div><div class="line"><span class="comment"># node execution define</span></div><div class="line">service.NodeExecutor.default.provider=script-<span class="keyword">exec</span></div><div class="line">plugin.script-<span class="keyword">exec</span>.default.command=ssh -p <span class="number">11022</span> -i /etc/rundeck/.sshkeys/publisher -o <span class="string">"StrictHostKeyChecking no"</span> $&#123;node.username&#125;@$&#123;node.hostname&#125; $&#123;<span class="keyword">exec</span>.command&#125;</div><div class="line">plugin.script-<span class="keyword">exec</span>.default.shell=bash -c</div></pre></td></tr></table></figure>
<p>注意提前在各个node上做好密钥验证</p>
<h1 id="怎么在project下添加node节点"><a href="#怎么在project下添加node节点" class="headerlink" title="怎么在project下添加node节点?"></a>怎么在project下添加node节点?</h1><p>当我们建立一个项目的时候,默认只会有server一个节点.如果需要在这个项目下配置其他机器,可以编辑对应项目的<code>etc/resources.xml</code>资源文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"localhost"</span> <span class="attr">description</span>=<span class="string">"Rundeck server node"</span> <span class="attr">tags</span>=<span class="string">""</span> <span class="attr">hostname</span>=<span class="string">"localhost"</span> <span class="attr">osArch</span>=<span class="string">"amd64"</span> <span class="attr">osFamily</span>=<span class="string">"unix"</span> <span class="attr">osName</span>=<span class="string">"Linux"</span> <span class="attr">osVersion</span>=<span class="string">"3.10.0-123.el7.x86_64"</span> <span class="attr">username</span>=<span class="string">"www"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"safe-115.12.12.12"</span> <span class="attr">description</span>=<span class="string">"web node for safe environment"</span> <span class="attr">tags</span>=<span class="string">"web,safe"</span> <span class="attr">hostname</span>=<span class="string">"10.105.196.25"</span> <span class="attr">osArch</span>=<span class="string">"amd64"</span> <span class="attr">osFamily</span>=<span class="string">"unix"</span> <span class="attr">osName</span>=<span class="string">"Linux"</span> <span class="attr">osVersion</span>=<span class="string">"3.10.0-123.el7.x86_64"</span> <span class="attr">username</span>=<span class="string">"www"</span> <span class="attr">role</span>=<span class="string">"web"</span> <span class="attr">env</span>=<span class="string">'safe'</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"product-11.11.11.11"</span> <span class="attr">description</span>=<span class="string">"web node for safe environment"</span> <span class="attr">tags</span>=<span class="string">"web,product"</span> <span class="attr">hostname</span>=<span class="string">"10.105.210.115"</span> <span class="attr">osArch</span>=<span class="string">"amd64"</span> <span class="attr">osFamily</span>=<span class="string">"unix"</span> <span class="attr">osName</span>=<span class="string">"Linux"</span> <span class="attr">osVersion</span>=<span class="string">"3.10.0-123.el7.x86_64"</span> <span class="attr">username</span>=<span class="string">"www"</span> <span class="attr">role</span>=<span class="string">"web"</span> <span class="attr">env</span>=<span class="string">'product'</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们可以在node中配置我们对于这个node的一些环境变量, 比如我定义了<br>role: web<br>env: product<br>..<br>之后我们可以在job的定义中,可以通过定义的变量去筛选服务器<br><img src="/assert/images/2017-01-10-rundeck-notice/node-filter.jpg" alt="node过滤"><br>同样也可以在nodes看到<br><img src="/assert/images/2017-01-10-rundeck-notice/nodes.jpg" alt="node过滤"></p>
<h1 id="怎么添加用户"><a href="#怎么添加用户" class="headerlink" title="怎么添加用户?"></a>怎么添加用户?</h1><p>用户的配置文件在<code>/etc/rundeck/realm.properties</code>文件中,我们可以通过<code>jetty-all</code>的jar包生成帐号和密码信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># find /var/lib/rundeck/ -iname &quot;*jetty-all*&quot;</div><div class="line">/var/lib/rundeck/bootstrap/jetty-all-9.0.7.v20131107.jar</div><div class="line"></div><div class="line"># java -cp /var/lib/rundeck/bootstrap/jetty-all-9.0.7.v20131107.jar org.eclipse.jetty.util.security.Password &#123;用户名&#125; &#123;密码&#125;</div><div class="line"># java -cp /var/lib/rundeck/bootstrap/jetty-all-9.0.7.v20131107.jar org.eclipse.jetty.util.security.Password RunAdmin yangcan</div><div class="line">yangcan</div><div class="line">OBF:1ytm1ri71uh61tvj1ugk1ri71yt0</div><div class="line">MD5:16cb5051f94fc7798e49d10b9eb1ea72</div><div class="line">CRYPT:RuJ7rNskTJFEE</div></pre></td></tr></table></figure>
<p>上面给出了不同的算法加密的密码</p>
<p>可以在文件的<code>/etc/rundeck/realm.properties</code>中配置用户,它的格式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># <span class="tag">&lt;<span class="name">username</span>&gt;</span>: <span class="tag">&lt;<span class="name">password</span>&gt;</span>[,<span class="tag">&lt;<span class="name">rolename</span>&gt;</span> ...]</div><div class="line"></div><div class="line">RunAdmin: MD5:16cb5051f94fc7798e49d10b9eb1ea72,user,admin,architect,deploy,build</div></pre></td></tr></table></figure></p>
<h1 id="TODO-未完待续"><a href="#TODO-未完待续" class="headerlink" title="TODO 未完待续"></a>TODO 未完待续</h1><ul>
<li>rundeck的权限配置</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;记录rundeck在使用的过程中的一些注意事项.&lt;/p&gt;
&lt;h1 id=&quot;SSH端口改变了怎么处理&quot;&gt;&lt;a href=&quot;#SSH端口改变了怎么处理&quot; class=&quot;headerlink&quot; title=&quot;SSH端口改变了怎么处理?&quot;&gt;&lt;/a&gt;SSH端口改变了怎么处理?&lt;/h1&gt;&lt;p&gt;我们知道rundeck是基于ssh的,而rundeck提供的配置文件中,没有配置ssh端口的选项.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;我们可以在新建项目的时候,在前端的配置文件中按如下的配置&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“Default Node Executor” 选择 “Script Execution”&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ssh -p 11022 -i /etc/rundeck/.sshkeys/publisher -o &amp;quot;StrictHostKeyChecking no&amp;quot; $&amp;#123;node.username&amp;#125;@$&amp;#123;node.hostname&amp;#125; $&amp;#123;exec.command&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="rundeck" scheme="https://yoncan.github.io/categories/rundeck/"/>
    
    
      <category term="rundeck" scheme="https://yoncan.github.io/tags/rundeck/"/>
    
      <category term="持续集成" scheme="https://yoncan.github.io/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>我的愤怒</title>
    <link href="https://yoncan.github.io/blog/2017/01/my-anger.html"/>
    <id>https://yoncan.github.io/blog/2017/01/my-anger.html</id>
    <published>2017-01-09T12:53:51.000Z</published>
    <updated>2017-01-17T14:00:43.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我想说的话"><a href="#我想说的话" class="headerlink" title="我想说的话"></a>我想说的话</h1><ul>
<li>人人都需要一面镜子<br>  人非圣贤,孰能无过. 所以不管什么时候,你都需要能有一面镜子,站在对面,能时刻审视自己.<br>  换位思考,或许能更好的说明问题.<br>  妈妈说: 当我们需要交朋友和别人谈话的时候, 首先是要谈别人感兴趣的事情.</li>
</ul>
<ul>
<li><p>什么是以身作则<br>  感谢我的第一份领导,<code>东信</code>的彭工. 他教我,什么是”树立标杆,以身作则”,别人不愿意的事情,你要”先做”.<br>  所以之后,一直到现在,我都做得比别人”多”, 也让自己参与到每一件事情中.</p>
</li>
<li><p>什么是言行合一<br>  以行践言,知行合一. 对于从你口中说过的每一句话, 那都是一个承若. 你若做不到, 你可以不说. 但不要轻易的说出口.</p>
</li>
</ul>
<a id="more"></a>
<h1 id="之后的放弃"><a href="#之后的放弃" class="headerlink" title="之后的放弃"></a>之后的放弃</h1><p>这个系统我是不打算开发了,因为不涉及到公司的机密,把他开源到 <a href="https://github.com/yoncan/KSEventSystem" target="_blank" rel="external">https://github.com/yoncan/KSEventSystem</a><br>放弃其实很痛苦的, 也至少是我一周的心血.</p>
<h1 id="一些截图"><a href="#一些截图" class="headerlink" title="一些截图"></a>一些截图</h1><p><img src="/assert/images/2017-01-09-my-anger/demo1.jpg" alt="demo1"><br><img src="/assert/images/2017-01-09-my-anger/demo2.jpg" alt="demo2"><br><img src="/assert/images/2017-01-09-my-anger/demo3.jpg" alt="demo3"></p>
<h1 id="可能"><a href="#可能" class="headerlink" title="可能"></a>可能</h1><ul>
<li>可能,我会选择在年前离开这里</li>
<li>可能,我选择隐忍</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我想说的话&quot;&gt;&lt;a href=&quot;#我想说的话&quot; class=&quot;headerlink&quot; title=&quot;我想说的话&quot;&gt;&lt;/a&gt;我想说的话&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;人人都需要一面镜子&lt;br&gt;  人非圣贤,孰能无过. 所以不管什么时候,你都需要能有一面镜子,站在对面,能时刻审视自己.&lt;br&gt;  换位思考,或许能更好的说明问题.&lt;br&gt;  妈妈说: 当我们需要交朋友和别人谈话的时候, 首先是要谈别人感兴趣的事情.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是以身作则&lt;br&gt;  感谢我的第一份领导,&lt;code&gt;东信&lt;/code&gt;的彭工. 他教我,什么是”树立标杆,以身作则”,别人不愿意的事情,你要”先做”.&lt;br&gt;  所以之后,一直到现在,我都做得比别人”多”, 也让自己参与到每一件事情中.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;什么是言行合一&lt;br&gt;  以行践言,知行合一. 对于从你口中说过的每一句话, 那都是一个承若. 你若做不到, 你可以不说. 但不要轻易的说出口.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="other" scheme="https://yoncan.github.io/categories/other/"/>
    
    
      <category term="other" scheme="https://yoncan.github.io/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>python itertools模块小结</title>
    <link href="https://yoncan.github.io/blog/2016/12/python-itertools.html"/>
    <id>https://yoncan.github.io/blog/2016/12/python-itertools.html</id>
    <published>2016-12-30T01:37:36.000Z</published>
    <updated>2017-01-17T14:00:43.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="itertools-包含的所有方法"><a href="#itertools-包含的所有方法" class="headerlink" title="itertools 包含的所有方法"></a>itertools 包含的所有方法</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">count([n]) --&gt; n, n+1, n+2, ...</div><div class="line">cycle(p) --&gt; p0, p1, ... plast, p0, p1, ...</div><div class="line">repeat(elem [,n]) --&gt; elem, elem, elem, ... endlessly or up to n times</div><div class="line"></div><div class="line">Iterators terminating on the shortest input sequence:</div><div class="line">chain(p, q, ...) --&gt; p0, p1, ... plast, q0, q1, ... </div><div class="line">compress(data, selectors) --&gt; (d[0] if s[0]), (d[1] if s[1]), ...</div><div class="line">dropwhile(pred, seq) --&gt; seq[n], seq[n+1], starting when pred fails</div><div class="line">groupby(iterable[, keyfunc]) --&gt; sub-iterators grouped by value of keyfunc(v)</div><div class="line">ifilter(pred, seq) --&gt; elements of seq where pred(elem) is True</div><div class="line">ifilterfalse(pred, seq) --&gt; elements of seq where pred(elem) is False</div><div class="line">islice(seq, [start,] stop [, step]) --&gt; elements from</div><div class="line">       seq[start:stop:step]</div><div class="line">imap(fun, p, q, ...) --&gt; fun(p0, q0), fun(p1, q1), ...</div><div class="line">starmap(fun, seq) --&gt; fun(*seq[0]), fun(*seq[1]), ...</div><div class="line">tee(it, n=2) --&gt; (it1, it2 , ... itn) splits one iterator into n</div><div class="line">takewhile(pred, seq) --&gt; seq[0], seq[1], until pred fails</div><div class="line">izip(p, q, ...) --&gt; (p[0], q[0]), (p[1], q[1]), ... </div><div class="line">izip_longest(p, q, ...) --&gt; (p[0], q[0]), (p[1], q[1]), ... </div><div class="line"></div><div class="line">Combinatoric generators:</div><div class="line">product(p, q, ... [repeat=1]) --&gt; cartesian product</div><div class="line">permutations(p[, r])</div><div class="line">combinations(p, r)</div><div class="line">combinations_with_replacement(p, r)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><h2 id="itertools-count"><a href="#itertools-count" class="headerlink" title="itertools.count"></a>itertools.count</h2><p>创建一个迭代器，生成从n开始的连续整数，如果忽略n，则从0开始计算（注意：此迭代器不支持长整数）<br>如果超出了sys.maxint，计数器将溢出并继续从-sys.maxint-1开始计算。</p>
<p><strong>定义</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(firstval=<span class="number">0</span>, step=<span class="number">1</span>)</span>:</span></div><div class="line">    x = firstval</div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">yield</span> x</div><div class="line">        x += step</div></pre></td></tr></table></figure>
<p><strong>使用</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">12</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> itertools.izip(count(<span class="number">1</span>), [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]):</div><div class="line">   ....:     print(i)</div><div class="line">   ....:     </div><div class="line">(<span class="number">1</span>, <span class="string">'a'</span>)</div><div class="line">(<span class="number">2</span>, <span class="string">'b'</span>)</div><div class="line">(<span class="number">3</span>, <span class="string">'c'</span>)</div></pre></td></tr></table></figure>
<hr>
<h2 id="itertools-cycle"><a href="#itertools-cycle" class="headerlink" title="itertools.cycle"></a>itertools.cycle</h2><p>创建一个迭代器，对iterable中的元素反复执行循环操作，内部会生成iterable中的元素的一个副本，此副本用于返回循环中的重复项.<br><strong>定义</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cycle</span><span class="params">(iterable)</span>:</span></div><div class="line">    <span class="comment"># cycle('ABCD') --&gt; A B C D A B C D A B C D ...</span></div><div class="line">    saved = []</div><div class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</div><div class="line">        <span class="keyword">yield</span> element</div><div class="line">        saved.append(element)</div><div class="line">    <span class="keyword">while</span> saved:</div><div class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> saved:</div><div class="line">            <span class="keyword">yield</span> element</div></pre></td></tr></table></figure></p>
<p><strong>使用</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">10</span>]: <span class="keyword">for</span> item <span class="keyword">in</span> itertools.cycle([<span class="string">'a'</span>,<span class="string">'b'</span>, <span class="string">'c'</span>]):</div><div class="line">   ....:     i += <span class="number">1</span></div><div class="line">   ....:     <span class="keyword">if</span> i == <span class="number">10</span>:</div><div class="line">   ....:         <span class="keyword">break</span></div><div class="line">   ....:     print(i, item)</div><div class="line">   ....:     </div><div class="line">(<span class="number">1</span>, <span class="string">'a'</span>)</div><div class="line">(<span class="number">2</span>, <span class="string">'b'</span>)</div><div class="line">(<span class="number">3</span>, <span class="string">'c'</span>)</div><div class="line">(<span class="number">4</span>, <span class="string">'a'</span>)</div><div class="line">(<span class="number">5</span>, <span class="string">'b'</span>)</div><div class="line">(<span class="number">6</span>, <span class="string">'c'</span>)</div><div class="line">(<span class="number">7</span>, <span class="string">'a'</span>)</div><div class="line">(<span class="number">8</span>, <span class="string">'b'</span>)</div><div class="line">(<span class="number">9</span>, <span class="string">'c'</span>)</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="itertools-repeat"><a href="#itertools-repeat" class="headerlink" title="itertools.repeat"></a>itertools.repeat</h2><p>创建一个迭代器，重复生成object，times（如果已提供）指定重复计数，如果未提供times，将无止尽返回该对象。</p>
<p><strong>定义</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeat</span><span class="params">(object, times=None)</span>:</span></div><div class="line">    <span class="comment"># repeat(10, 3) --&gt; 10 10 10</span></div><div class="line">    <span class="keyword">if</span> times <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">yield</span> object</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(times):</div><div class="line">            <span class="keyword">yield</span> object</div></pre></td></tr></table></figure></p>
<p><strong>使用</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">14</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> itertools.repeat(<span class="string">'over-and-over'</span>, <span class="number">5</span>):</div><div class="line">   ....:     print(i)</div><div class="line">   ....:     </div><div class="line">over-<span class="keyword">and</span>-over</div><div class="line">over-<span class="keyword">and</span>-over</div><div class="line">over-<span class="keyword">and</span>-over</div><div class="line">over-<span class="keyword">and</span>-over</div><div class="line">over-<span class="keyword">and</span>-over</div></pre></td></tr></table></figure>
<hr>
<h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><h2 id="itertools-chain"><a href="#itertools-chain" class="headerlink" title="itertools.chain"></a>itertools.chain</h2><p>将多个迭代器作为参数, 但只返回单个迭代器, 它产生所有参数迭代器的内容, 就好像他们是来自于一个单一的序列.</p>
<p><strong>定义</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">chain</span><span class="params">(*iterables)</span>:</span></div><div class="line">    <span class="comment"># chain('ABC', 'DEF') --&gt; A B C D E F</span></div><div class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> iterables:</div><div class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> it:</div><div class="line">            <span class="keyword">yield</span> element</div></pre></td></tr></table></figure>
<p><strong>使用</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">16</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> itertools.chain([<span class="number">1</span>,<span class="number">2</span>], [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]):     </div><div class="line">   ....:     print(i)</div><div class="line">   ....:     </div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line"></div><div class="line">  </div><div class="line">In [<span class="number">19</span>]: <span class="function"><span class="keyword">def</span> <span class="title">listdir</span><span class="params">(func, items)</span>:</span></div><div class="line">   ....:     <span class="keyword">return</span> itertools.chain.from_iterable(itertools.imap(func, items))</div><div class="line">   </div><div class="line">In [<span class="number">20</span>]: list(listdir(os.listdir, <span class="string">'.'</span>))</div><div class="line">Out[<span class="number">20</span>]: </div><div class="line">[<span class="string">'.bash_logout'</span>,</div><div class="line"> <span class="string">'.bash_profile'</span>,</div><div class="line"> <span class="string">'.bashrc'</span>,</div><div class="line"> <span class="string">'.cshrc'</span>,</div><div class="line"> <span class="string">'.tcshrc'</span>,</div><div class="line"> <span class="string">'.bash_history'</span>,</div><div class="line"> <span class="string">'.pki'</span>,</div><div class="line">    ....</div><div class="line"> <span class="string">'.my.cnf'</span>,</div><div class="line"> <span class="string">'_temp'</span>]</div></pre></td></tr></table></figure>
<hr>
<h2 id="itertools-compress"><a href="#itertools-compress" class="headerlink" title="itertools.compress"></a>itertools.compress</h2><p>提供一个选择列表，对原始数据进行筛选</p>
<p><strong>定义</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span><span class="params">(data, selectors)</span>:</span></div><div class="line">    <span class="comment"># compress('ABCDEF', [1,0,1,0,1,1]) --&gt; A C E F</span></div><div class="line">    <span class="keyword">return</span> (d <span class="keyword">for</span> d, s <span class="keyword">in</span> izip(data, selectors) <span class="keyword">if</span> s)</div></pre></td></tr></table></figure></p>
<p><strong>使用</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">23</span>]: list(itertools.compress(<span class="string">'ABCDEFG'</span>, [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]))    </div><div class="line">Out[<span class="number">23</span>]: [<span class="string">'A'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>]</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="itertools-dropwhile-predicate-iterable"><a href="#itertools-dropwhile-predicate-iterable" class="headerlink" title="itertools.dropwhile(predicate, iterable)"></a>itertools.dropwhile(predicate, iterable)</h2><p>创建一个迭代器，只要函数predicate(item)为True，就丢弃iterable中的项，如果predicate返回False，就会生成iterable中的项和所有后续项。</p>
<p>即：在条件为false之后的第一次, 返回迭代器中剩下来的项(包括当前项).</p>
<p><strong>定义</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropwhile</span><span class="params">(predicate, iterable)</span>:</span></div><div class="line">    <span class="comment"># dropwhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 6 4 1</span></div><div class="line">    iterable = iter(iterable)</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> predicate(x):</div><div class="line">            <span class="keyword">yield</span> x</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</div><div class="line">        <span class="keyword">yield</span> x</div></pre></td></tr></table></figure></p>
<p><strong>使用</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">30</span>]: list(itertools.dropwhile(<span class="keyword">lambda</span> x: x&lt;<span class="number">1</span>, [<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">-2</span>]))    </div><div class="line">Out[<span class="number">30</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">-2</span>]</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="itertools-groupby-iterable-keyfunc"><a href="#itertools-groupby-iterable-keyfunc" class="headerlink" title="itertools.groupby(iterable[, keyfunc])"></a>itertools.groupby(iterable[, keyfunc])</h2><p>返回一个产生按照key进行分组后的值集合的迭代器.</p>
<p>如果iterable在多次连续迭代中生成了同一项，则会定义一个组，如果将此函数应用一个分类列表，那么分组将定义该列表中的所有唯一项，key（如果已提供）是一个函数，应用于每一项，如果此函数存在返回值，该值将用于后续项而不是该项本身进行比较，此函数返回的迭代器生成元素(key, group)，其中key是分组的键值，group是迭代器，生成组成该组的所有项。</p>
<p>即：按照keyfunc函数对序列每个元素执行后的结果分组(每个分组是一个迭代器), 返回这些分组的迭代器</p>
<p><strong>注意: 分组之前 iterable 需要是一个排序序列</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">In [<span class="number">38</span>]: qs = [&#123;<span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'yangcan'</span>&#125;,</div><div class="line"> &#123;<span class="string">'age'</span>: <span class="number">12</span>, <span class="string">'name'</span>: <span class="string">'xiaoyang'</span>&#125;,</div><div class="line"> &#123;<span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'xx'</span>&#125;,</div><div class="line"> &#123;<span class="string">'age'</span>: <span class="number">13</span>, <span class="string">'name'</span>: <span class="string">'lisi'</span>&#125;]</div><div class="line"> </div><div class="line">In [<span class="number">40</span>]: <span class="keyword">for</span> name, group <span class="keyword">in</span> itertools.groupby(sorted(qs), <span class="keyword">lambda</span> x: x[<span class="string">'age'</span>]):  </div><div class="line">    print(name, list(group))</div><div class="line">   ....:     </div><div class="line">(<span class="number">10</span>, [&#123;<span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'xx'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'yangcan'</span>&#125;])</div><div class="line">(<span class="number">12</span>, [&#123;<span class="string">'age'</span>: <span class="number">12</span>, <span class="string">'name'</span>: <span class="string">'xiaoyang'</span>&#125;])</div><div class="line">(<span class="number">13</span>, [&#123;<span class="string">'age'</span>: <span class="number">13</span>, <span class="string">'name'</span>: <span class="string">'lisi'</span>&#125;])</div></pre></td></tr></table></figure>
<p>使用operator.itemgetter<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">43</span>]: <span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</div><div class="line">In [<span class="number">44</span>]: <span class="keyword">for</span> name, group <span class="keyword">in</span> itertools.groupby(sorted(qs), itemgetter(<span class="string">'age'</span>)):</div><div class="line">    print(name, list(group))</div><div class="line">   ....:     </div><div class="line">(<span class="number">10</span>, [&#123;<span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'xx'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'yangcan'</span>&#125;])</div><div class="line">(<span class="number">12</span>, [&#123;<span class="string">'age'</span>: <span class="number">12</span>, <span class="string">'name'</span>: <span class="string">'xiaoyang'</span>&#125;])</div><div class="line">(<span class="number">13</span>, [&#123;<span class="string">'age'</span>: <span class="number">13</span>, <span class="string">'name'</span>: <span class="string">'lisi'</span>&#125;])</div></pre></td></tr></table></figure></p>
<h1 id="TODO-未完待续-…"><a href="#TODO-未完待续-…" class="headerlink" title="TODO 未完待续 …"></a>TODO 未完待续 …</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;itertools-包含的所有方法&quot;&gt;&lt;a href=&quot;#itertools-包含的所有方法&quot; class=&quot;headerlink&quot; title=&quot;itertools 包含的所有方法&quot;&gt;&lt;/a&gt;itertools 包含的所有方法&lt;/h1&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;count([n]) --&amp;gt; n, n+1, n+2, ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cycle(p) --&amp;gt; p0, p1, ... plast, p0, p1, ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;repeat(elem [,n]) --&amp;gt; elem, elem, elem, ... endlessly or up to n times&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Iterators terminating on the shortest input sequence:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;chain(p, q, ...) --&amp;gt; p0, p1, ... plast, q0, q1, ... &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;compress(data, selectors) --&amp;gt; (d[0] if s[0]), (d[1] if s[1]), ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dropwhile(pred, seq) --&amp;gt; seq[n], seq[n+1], starting when pred fails&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;groupby(iterable[, keyfunc]) --&amp;gt; sub-iterators grouped by value of keyfunc(v)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ifilter(pred, seq) --&amp;gt; elements of seq where pred(elem) is True&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ifilterfalse(pred, seq) --&amp;gt; elements of seq where pred(elem) is False&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;islice(seq, [start,] stop [, step]) --&amp;gt; elements from&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       seq[start:stop:step]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;imap(fun, p, q, ...) --&amp;gt; fun(p0, q0), fun(p1, q1), ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;starmap(fun, seq) --&amp;gt; fun(*seq[0]), fun(*seq[1]), ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tee(it, n=2) --&amp;gt; (it1, it2 , ... itn) splits one iterator into n&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;takewhile(pred, seq) --&amp;gt; seq[0], seq[1], until pred fails&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;izip(p, q, ...) --&amp;gt; (p[0], q[0]), (p[1], q[1]), ... &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;izip_longest(p, q, ...) --&amp;gt; (p[0], q[0]), (p[1], q[1]), ... &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Combinatoric generators:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;product(p, q, ... [repeat=1]) --&amp;gt; cartesian product&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;permutations(p[, r])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;combinations(p, r)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;combinations_with_replacement(p, r)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="https://yoncan.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://yoncan.github.io/tags/python/"/>
    
      <category term="itertools" scheme="https://yoncan.github.io/tags/itertools/"/>
    
  </entry>
  
  <entry>
    <title>zabbix 使用微信发送报警信息</title>
    <link href="https://yoncan.github.io/blog/2016/12/zabbix-weixin-alert.html"/>
    <id>https://yoncan.github.io/blog/2016/12/zabbix-weixin-alert.html</id>
    <published>2016-12-29T14:56:06.000Z</published>
    <updated>2017-01-09T15:31:51.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本脚本是利用微信的公众平台进行信息推送的发送报警信息的.<br>可以通过这个链接 <a href="https://qy.weixin.qq.com/" target="_blank" rel="external">微信平台</a> 了解, 可以注册团队,就没有时间限制了.</p>
<h1 id="代码文件"><a href="#代码文件" class="headerlink" title="代码文件"></a>代码文件</h1><blockquote><ul>
<li>需要安装requests模块,当初嫌麻烦,就直接使用的<code>requests</code>.</li>
<li>脚本中最后,需要修改成实际的信息.</li>
</ul>
</blockquote>
<a id="more"></a> 
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># Author: Ycan</span></div><div class="line"><span class="string">"""</span></div><div class="line">    微信报警</div><div class="line">"""</div><div class="line"> </div><div class="line"><span class="keyword">import</span> urllib3</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> json</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">import</span> requests</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'request `requests` module'</span></div><div class="line">    sys.exit()</div><div class="line"> </div><div class="line"><span class="keyword">if</span> sys.getdefaultencoding() != <span class="string">'utf8'</span>:</div><div class="line">    reload(sys)</div><div class="line">    sys.setdefaultencoding(<span class="string">'utf8'</span>)</div><div class="line"> </div><div class="line">requests.packages.urllib3.disable_warnings()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiXinExcept</span><span class="params">(Exception)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, code=<span class="number">400</span>, message=<span class="string">u'Request Error'</span>, *args, **kwargs)</span>:</span></div><div class="line">        self.code = code</div><div class="line">        self.message = message</div><div class="line">        self.data = &#123;<span class="string">'code'</span>: self.code, <span class="string">'message'</span>: self.message&#125;</div><div class="line">        super(WeiXinExcept, self).__init__(*args, **kwargs)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> repr(self.data)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiXin</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, corpid=<span class="string">''</span>, corpsecret=<span class="string">''</span>)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        微信接口</div><div class="line">        :param corpid: CorpID是企业号的标识，每个企业号拥有一个唯一的CorpID</div><div class="line">        :param corpsecret: Secret是管理组凭证密钥</div><div class="line">        """</div><div class="line">        self.corpid = corpid</div><div class="line">        self.corpsecret = corpsecret</div><div class="line">        self.urls = dict(</div><div class="line">            token=<span class="string">'https://qyapi.weixin.qq.com/cgi-bin/gettoken'</span>,</div><div class="line">            send_msg=<span class="string">'https://qyapi.weixin.qq.com/cgi-bin/message/send'</span>,</div><div class="line">            department_list=<span class="string">'https://qyapi.weixin.qq.com/cgi-bin/department/list'</span>,</div><div class="line">            user_list=<span class="string">'https://qyapi.weixin.qq.com/cgi-bin/user/simplelist'</span>,</div><div class="line">        )</div><div class="line">        self.headers = &#123;<span class="string">"Content-type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>, <span class="string">"Accept"</span>: <span class="string">"text/plain"</span>&#125;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> corpid <span class="keyword">or</span> <span class="keyword">not</span> corpsecret:</div><div class="line">            <span class="keyword">raise</span> WeiXinExcept(message=<span class="string">u'need CorpID and Secret'</span>)</div><div class="line"> </div><div class="line">        self.token = self.get_token()</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :return: token</div><div class="line">        """</div><div class="line">        token_url = self.urls.get(<span class="string">'token'</span>)</div><div class="line">        params = dict(corpid=self.corpid, corpsecret=self.corpsecret)</div><div class="line">        _token = requests.get(token_url, params=params)</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> _token.ok <span class="keyword">and</span> _token.json().has_key(<span class="string">'access_token'</span>):</div><div class="line">            <span class="keyword">return</span> _token.json()[<span class="string">'access_token'</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> WeiXinExcept(message=<span class="string">u'get token error!'</span>)</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_department</span><span class="params">(self, department_name=None)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :param department_name: 部门的名称</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        url = self.urls.get(<span class="string">'department_list'</span>)</div><div class="line">        params = dict(access_token=self.token)</div><div class="line">        r = requests.get(url, params=params)</div><div class="line">        <span class="keyword">if</span> self._check_request_status(r):</div><div class="line">            dept_list = r.json().get(<span class="string">'department'</span>, <span class="keyword">None</span>)</div><div class="line">            <span class="keyword">if</span> dept_list <span class="keyword">and</span> department_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">return</span> filter(<span class="keyword">lambda</span> x: x[<span class="string">'name'</span>] == department_name.decode(<span class="string">'utf8'</span>), dept_list)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> dept_list</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_department_members</span><span class="params">(self, department_id, fetch_child=<span class="number">1</span>, status=<span class="number">1</span>)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :param department_id: 部门ID</div><div class="line">        :param fetch_child: 1/0：是否递归获取子部门下面的成员</div><div class="line">        :param status: 0获取全部员工，1获取已关注成员列表，2获取禁用成员列表，4获取未关注成员列表。status可叠加</div><div class="line">        :return: 返回部门成员的列表</div><div class="line">        """</div><div class="line">        params = dict(access_token=self.token, department_id=department_id, fetch_child=fetch_child, status=status)</div><div class="line">        r = requests.get(self.urls.get(<span class="string">'user_list'</span>), params=params)</div><div class="line">        <span class="keyword">if</span> self._check_request_status(r):</div><div class="line">            <span class="keyword">return</span> r.json().get(<span class="string">'userlist'</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_msg_to_user</span><span class="params">(self, users=[], paryts=[], agentid=<span class="string">'0'</span>, msgtype=<span class="string">'text'</span>, content=<span class="string">''</span>, safe=<span class="string">'0'</span>)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        `发送信息到用户`</div><div class="line">        :param users: type `string` or list ,发送的用户ID,或者用户ID列表</div><div class="line">        :param paryts: type `string` or list ,发送的用户组ID,或者用户组ID列表</div><div class="line">        :param agentid: 企业应用的id，整型。可在应用的设置页面查看</div><div class="line">        :param msgtype: 消息类型，此时固定为：text</div><div class="line">        :param content: 消息内容</div><div class="line">        :param safe: 表示是否是保密消息，0表示否，1表示是，默认0</div><div class="line">        `发送的数据`</div><div class="line">        &#123;</div><div class="line">           "touser": "UserID1|UserID2|UserID3",</div><div class="line">           "toparty": " PartyID1 | PartyID2 ",</div><div class="line">           "totag": " TagID1 | TagID2 ",</div><div class="line">           "msgtype": "text",</div><div class="line">           "agentid": "1",</div><div class="line">           "text": &#123;</div><div class="line">               "content": "Holiday Request For Pony(http://xxxxx)"</div><div class="line">           &#125;,</div><div class="line">           "safe":"0"</div><div class="line">        &#125;</div><div class="line">        :return: True or False</div><div class="line">        """</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (users <span class="keyword">or</span> paryts):</div><div class="line">            <span class="keyword">raise</span> WeiXinExcept(message=<span class="string">u'users or paryts not null.'</span>)</div><div class="line"> </div><div class="line">        touser = <span class="string">'|'</span>.join(users)</div><div class="line">        toparty = <span class="string">'|'</span>.join(paryts)</div><div class="line">        _params = dict(</div><div class="line">            msgtype=msgtype,</div><div class="line">            agentid=agentid,</div><div class="line">            text=dict(content=content),</div><div class="line">            safe=safe</div><div class="line">        )</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> touser: _params[<span class="string">'touser'</span>] = touser</div><div class="line">        <span class="keyword">if</span> toparty: _params[<span class="string">'toparty'</span>] = toparty</div><div class="line">        data = json.dumps(_params, ensure_ascii=<span class="keyword">False</span>).encode(<span class="string">'utf8'</span>)</div><div class="line">        url = self.urls.get(<span class="string">'send_msg'</span>) + <span class="string">'?access_token=%s'</span> % urllib.quote(self.token)</div><div class="line">        r = requests.post(url, data=data, headers=self.headers)</div><div class="line">        <span class="keyword">if</span> self._check_request_status(r):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"> </div><div class="line">        <span class="keyword">return</span> r.json() <span class="keyword">if</span> r.json() <span class="keyword">else</span> r.raise_for_status()</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_check_request_status</span><span class="params">(self, rq)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :param request: 请求</div><div class="line">        :return: 如果情况没有错误,返回True, 否则返回False</div><div class="line">        """</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> rq.ok <span class="keyword">and</span> rq.json().get(<span class="string">'errcode'</span>) == <span class="number">0</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendMsg</span><span class="params">(users=[], content=<span class="string">''</span>)</span>:</span></div><div class="line">    weixin = WeiXin(corpid=CorpID, corpsecret=Secret)</div><div class="line">    department_list = weixin.get_department(department_name=department_name)</div><div class="line">    <span class="keyword">if</span> department_list:</div><div class="line">        dept_id = department_list[<span class="number">0</span>][<span class="string">'id'</span>]</div><div class="line"> </div><div class="line">        user_list = weixin.get_department_members(dept_id)</div><div class="line">        <span class="keyword">if</span> user_list:</div><div class="line">            user_list_id = [x[<span class="string">'userid'</span>] <span class="keyword">for</span> x <span class="keyword">in</span> user_list]</div><div class="line"> </div><div class="line">            <span class="comment"># 筛选只关注了企业帐号的 userid</span></div><div class="line">            send_user_id = set(users).intersection(set(user_list_id))</div><div class="line"> </div><div class="line">            out_user_id = set(users).difference(set(user_list_id))</div><div class="line"> </div><div class="line">            <span class="keyword">if</span> send_user_id:</div><div class="line">                result = weixin.send_msg_to_user(users=send_user_id, content=content)</div><div class="line">                <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">True</span>:</div><div class="line">                    <span class="keyword">print</span> result</div><div class="line"> </div><div class="line">                <span class="keyword">if</span> out_user_id:</div><div class="line">                    print(<span class="string">u'指定的接收人[%s]的ID没有关注企业帐号.'</span> % <span class="string">','</span>.join(out_user_id))</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">raise</span> WeiXinExcept(message=<span class="string">u'指定的接收人[%s]的ID没有关注企业帐号.'</span> % <span class="string">','</span>.join(user_list))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> WeiXinExcept(message=<span class="string">u'部门[%s]下,没有可用的成员列表'</span> % department_name)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">raise</span> WeiXinExcept(message=<span class="string">u'不能获取到部门[%s]列表,请检查.'</span> % department_name)</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 开发者的信息</span></div><div class="line">	<span class="comment"># 需要修改成实际的帐号以及agentid信息</span></div><div class="line">    CorpID = <span class="string">'xx'</span></div><div class="line">    Secret = <span class="string">'xx'</span></div><div class="line">    <span class="comment"># 发送的user在哪个部门</span></div><div class="line">    department_name = <span class="string">'YunWei'</span></div><div class="line">    <span class="comment"># 应用ID</span></div><div class="line">    agentid = <span class="number">0</span></div><div class="line"> </div><div class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">3</span>:</div><div class="line">        help = <span class="string">"""</span></div><div class="line">            usge: %s &lt;userid,userid...&gt; &lt;subject&gt; [content]</div><div class="line">            """ % sys.argv[<span class="number">0</span>]</div><div class="line">        <span class="keyword">print</span> help</div><div class="line">        sys.exit()</div><div class="line"> </div><div class="line">    userid_list = sys.argv[<span class="number">1</span>].split(<span class="string">','</span>)</div><div class="line">    content = <span class="string">'\n'</span>.join(sys.argv[<span class="number">2</span>:])</div><div class="line">    sendMsg(users=userid_list, content=content)</div></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><code>907310009</code>为你添加用户时指定的帐号.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># python weixin.py 907310009 &quot;你好,测试微信报警&quot;</div></pre></td></tr></table></figure></p>
<img src="/assert/images/2016-12-29-zabbix-weixin-alert/zabbix-weixin-alert-01.png" title="接收信息的显示">
<h1 id="怎样查看agentid-和-Secret-等信息"><a href="#怎样查看agentid-和-Secret-等信息" class="headerlink" title="怎样查看agentid 和 Secret 等信息"></a>怎样查看agentid 和 Secret 等信息</h1><p>下面用图说明吧,太详细的在后台自己可以琢磨琢磨</p>
<img src="/assert/images/2016-12-29-zabbix-weixin-alert/zabbix-weixin-alert-02.jpg" title="应用ID查看">
<img src="/assert/images/2016-12-29-zabbix-weixin-alert/zabbix-weixin-alert-03.png" title="分组和用户ID">
<img src="/assert/images/2016-12-29-zabbix-weixin-alert/zabbix-weixin-alert-04.png" title="应用的授权信息CorpID和Secret">
<img src="/assert/images/2016-12-29-zabbix-weixin-alert/zabbix-weixin-alert-05.png" title="应用的授权信息CorpID和Secret">
<h1 id="后续工作-TODO"><a href="#后续工作-TODO" class="headerlink" title="后续工作 TODO"></a>后续工作 TODO</h1><ul>
<li>增加信息发送频率的限制<br>  这个应用的场景是,在有大量报警的前提下,为了不在短时间范围内一下收到太多短信轰炸,做一个限制多少分钟内发送指定的接收人不超过多少条信息.<br>  这个功能其实已经用shell处理好了,只是python这段代码没有事件修改.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;本脚本是利用微信的公众平台进行信息推送的发送报警信息的.&lt;br&gt;可以通过这个链接 &lt;a href=&quot;https://qy.weixin.qq.com/&quot;&gt;微信平台&lt;/a&gt; 了解, 可以注册团队,就没有时间限制了.&lt;/p&gt;
&lt;h1 id=&quot;代码文件&quot;&gt;&lt;a href=&quot;#代码文件&quot; class=&quot;headerlink&quot; title=&quot;代码文件&quot;&gt;&lt;/a&gt;代码文件&lt;/h1&gt;&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;需要安装requests模块,当初嫌麻烦,就直接使用的&lt;code&gt;requests&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;脚本中最后,需要修改成实际的信息.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="zabbix" scheme="https://yoncan.github.io/categories/zabbix/"/>
    
    
      <category term="python" scheme="https://yoncan.github.io/tags/python/"/>
    
      <category term="zabbix" scheme="https://yoncan.github.io/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>在ansbile的setup上的一些扩展功能</title>
    <link href="https://yoncan.github.io/blog/2016/12/ansible-extend-setup.html"/>
    <id>https://yoncan.github.io/blog/2016/12/ansible-extend-setup.html</id>
    <published>2016-12-29T14:18:47.000Z</published>
    <updated>2017-01-09T15:31:51.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>为了配合做的资产信息搜集, 直接在setup模块上加上了raid卡,底层的物理磁盘,内存等相关信息.</p>
<h1 id="一些改变"><a href="#一些改变" class="headerlink" title="一些改变"></a>一些改变</h1><ul>
<li>取消了原本关于磁盘单位的自动格式,改为磁盘的最大单位支持到GB,如果需要和原生一下,那在代码文件的 <code>314-317</code> 行注释</li>
</ul>
<h1 id="依赖说明"><a href="#依赖说明" class="headerlink" title="依赖说明"></a>依赖说明</h1><p>底层的raid和磁盘信息收集需要安装<code>MegaCli64</code>包,关于安装方法,自行解决.<br>另外关于raid级别,怎么推算成raid5或者raid1+0的. 因为我线上只有这2种,所以如果需要的话,自行解决raid级别的判断.</p>
<h1 id="代码文件"><a href="#代码文件" class="headerlink" title="代码文件"></a>代码文件</h1><p>把下面的代码保存为扩展模块,比如文件名setupex.py, 放在你<code>ansible.cfg</code>配置文件中<code>library</code>定义的路径下.</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"> </div><div class="line"><span class="comment"># (c) 2012, Michael DeHaan &lt;michael.dehaan@gmail.com&gt;</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># This file is part of Ansible</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Ansible is free software: you can redistribute it and/or modify</span></div><div class="line"><span class="comment"># it under the terms of the GNU General Public License as published by</span></div><div class="line"><span class="comment"># the Free Software Foundation, either version 3 of the License, or</span></div><div class="line"><span class="comment"># (at your option) any later version.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Ansible is distributed in the hope that it will be useful,</span></div><div class="line"><span class="comment"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><span class="comment"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><span class="comment"># GNU General Public License for more details.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># You should have received a copy of the GNU General Public License</span></div><div class="line"><span class="comment"># along with Ansible.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"> </div><div class="line">DOCUMENTATION = <span class="string">'''</span></div><div class="line">---</div><div class="line">module: setup</div><div class="line">version_added: historical</div><div class="line">short_description: Gathers facts about remote hosts</div><div class="line">options:</div><div class="line">    gather_subset:</div><div class="line">        version_added: "2.1"</div><div class="line">        description:</div><div class="line">            - "if supplied, restrict the additional facts collected to the given subset.</div><div class="line">              Possible values: all, hardware, network, virtual, ohai, and</div><div class="line">              facter Can specify a list of values to specify a larger subset.</div><div class="line">              Values can also be used with an initial C(!) to specify that</div><div class="line">              that specific subset should not be collected.  For instance:</div><div class="line">              !hardware, !network, !virtual, !ohai, !facter.  Note that a few</div><div class="line">              facts are always collected.  Use the filter parameter if you do</div><div class="line">              not want to display those."</div><div class="line">        required: false</div><div class="line">        default: 'all'</div><div class="line">    filter:</div><div class="line">        version_added: "1.1"</div><div class="line">        description:</div><div class="line">            - if supplied, only return facts that match this shell-style (fnmatch) wildcard.</div><div class="line">        required: false</div><div class="line">        default: '*'</div><div class="line">    fact_path:</div><div class="line">        version_added: "1.3"</div><div class="line">        description:</div><div class="line">            - path used for local ansible facts (*.fact) - files in this dir</div><div class="line">              will be run (if executable) and their results be added to ansible_local facts</div><div class="line">              if a file is not executable it is read. Check notes for Windows options. (from 2.1 on)</div><div class="line">              File/results format can be json or ini-format</div><div class="line">        required: false</div><div class="line">        default: '/etc/ansible/facts.d'</div><div class="line">description:</div><div class="line">     - This module is automatically called by playbooks to gather useful</div><div class="line">       variables about remote hosts that can be used in playbooks. It can also be</div><div class="line">       executed directly by C(/usr/bin/ansible) to check what variables are</div><div class="line">       available to a host. Ansible provides many I(facts) about the system,</div><div class="line">       automatically.</div><div class="line">notes:</div><div class="line">    - More ansible facts will be added with successive releases. If I(facter) or</div><div class="line">      I(ohai) are installed, variables from these programs will also be snapshotted</div><div class="line">      into the JSON file for usage in templating. These variables are prefixed</div><div class="line">      with C(facter_) and C(ohai_) so it's easy to tell their source. All variables are</div><div class="line">      bubbled up to the caller. Using the ansible facts and choosing to not</div><div class="line">      install I(facter) and I(ohai) means you can avoid Ruby-dependencies on your</div><div class="line">      remote systems. (See also M(facter) and M(ohai).)</div><div class="line">    - The filter option filters only the first level subkey below ansible_facts.</div><div class="line">    - If the target host is Windows, you will not currently have the ability to use</div><div class="line">      C(filter) as this is provided by a simpler implementation of the module.</div><div class="line">    - If the target host is Windows you can now use C(fact_path). Make sure that this path </div><div class="line">      exists on the target host. Files in this path MUST be PowerShell scripts (``*.ps1``) and </div><div class="line">      their output must be formattable in JSON (Ansible will take care of this). Test the </div><div class="line">      output of your scripts.</div><div class="line">      This option was added in Ansible 2.1.</div><div class="line">author:</div><div class="line">    - "Ansible Core Team"</div><div class="line">    - "Michael DeHaan"</div><div class="line">    - "David O'Brien @david_obrien davidobrien1985"</div><div class="line">'''</div><div class="line"> </div><div class="line">EXAMPLES = <span class="string">"""</span></div><div class="line"># Display facts from all hosts and store them indexed by I(hostname) at C(/tmp/facts).</div><div class="line">ansible all -m setup --tree /tmp/facts</div><div class="line"> </div><div class="line"># Display only facts regarding memory found by ansible on all hosts and output them.</div><div class="line">ansible all -m setup -a 'filter=ansible_*_mb'</div><div class="line"> </div><div class="line"># Display only facts returned by facter.</div><div class="line">ansible all -m setup -a 'filter=facter_*'</div><div class="line"> </div><div class="line"># Display only facts about certain interfaces.</div><div class="line">ansible all -m setup -a 'filter=ansible_eth[0-2]'</div><div class="line"> </div><div class="line"># Restrict additional gathered facts to network and virtual.</div><div class="line">ansible all -m setup -a 'gather_subset=network,virtual'</div><div class="line"> </div><div class="line"># Do not call puppet facter or ohai even if present.</div><div class="line">ansible all -m setup -a 'gather_subset=!facter,!ohai'</div><div class="line"> </div><div class="line"># Only collect the minimum amount of facts:</div><div class="line">ansible all -m setup -a 'gather_subset=!all'</div><div class="line"> </div><div class="line"># Display facts from Windows hosts with custom facts stored in C(C:\\custom_facts).</div><div class="line">ansible windows -m setup -a "fact_path='c:\\custom_facts'"</div><div class="line">"""</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogoFacts</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, is_virtual_type=False)</span>:</span></div><div class="line">        self.facts = dict()</div><div class="line">        self.level = &#123;</div><div class="line">            <span class="string">'RAID-5'</span>: [<span class="string">'Primary-5, Secondary-0, RAID Level Qualifier-3'</span>, <span class="string">'3'</span>, <span class="string">'1'</span>],</div><div class="line">            <span class="string">'RAID-1'</span>: [<span class="string">'Primary-1, Secondary-0, RAID Level Qualifier-0'</span>, <span class="string">'2'</span>, <span class="string">'1'</span>],</div><div class="line">            <span class="string">'RAID-10'</span>: [<span class="string">'Primary-1, Secondary-0, RAID Level Qualifier-0'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>],</div><div class="line">            <span class="string">'RAID-0'</span>: [<span class="string">'Primary-0, Secondary-0, RAID Level Qualifier-0'</span>, <span class="string">'2'</span>, <span class="string">'1'</span>]</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        self.facts[<span class="string">'dogo_raid_level'</span>] = <span class="string">'NA'</span></div><div class="line">        self.facts[<span class="string">'dogo_disk_size'</span>] = <span class="string">'NA'</span></div><div class="line">        self.facts[<span class="string">'dogo_raid_disk'</span>] = []</div><div class="line">        self.facts[<span class="string">'dogo_memory_detail'</span>] = []</div><div class="line">        self.facts[<span class="string">'dogo_raid_info'</span>] = []</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> is_virtual_type <span class="keyword">is</span> <span class="keyword">False</span>:</div><div class="line">            self.get_dogo_facts()</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">populate</span><span class="params">(self)</span>:</span></div><div class="line">        cwd = os.getcwd()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self.facts</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            clear_files = [os.path.join(cwd, <span class="string">'MegaSAS.log'</span>), os.path.join(cwd, <span class="string">'CmdTool.log'</span>)]</div><div class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> clear_files:</div><div class="line">                <span class="keyword">if</span> os.path.isfile(f): os.remove(f)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dogo_facts</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" 阵列级别</span></div><div class="line">        :return:</div><div class="line">        """</div><div class="line"> </div><div class="line">        MegaCli64_bin = <span class="string">'/opt/MegaRAID/MegaCli/MegaCli64'</span></div><div class="line">        dmidecode_bin = <span class="string">'/usr/sbin/dmidecode'</span></div><div class="line"> </div><div class="line">        cmd_info = []</div><div class="line">        <span class="keyword">if</span> os.path.exists(MegaCli64_bin):</div><div class="line">            cmd_info.extend([</div><div class="line">                dict(</div><div class="line">                    cmd=<span class="string">"%s -cfgdsply -aALL|egrep -i '^(Adapter:|Product Name:|Memory:|Serial No:)'"</span> % MegaCli64_bin,</div><div class="line">                    cb=self._raid_info_format</div><div class="line">                ),</div><div class="line">                dict(</div><div class="line">                    cmd=<span class="string">"%s -LDInfo -Lall -aALL|egrep -i '^(RAID Level|Size|Number Of Drives|Span Depth)'"</span> % MegaCli64_bin,</div><div class="line">                    cb=self._raid_level_format</div><div class="line">                ),</div><div class="line">                dict(</div><div class="line">                    cmd=<span class="string">"%s -PDList -aAll|egrep -i '^(Slot Number|PD Type|Raw Size|Device Firmware Level|Inquiry Data):'"</span> % MegaCli64_bin,</div><div class="line">                    cb=self._raid_disk_format</div><div class="line">                )])</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> os.path.exists(dmidecode_bin):</div><div class="line">            cmd_info.append(dict(</div><div class="line">                cmd=<span class="string">'%s -t memory'</span> % dmidecode_bin,</div><div class="line">                cb=self._get_memory_format</div><div class="line">            ))</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> cmd_info:</div><div class="line">            cmd = c[<span class="string">'cmd'</span>]</div><div class="line">            (rc, out, err) = module.run_command(cmd, use_unsafe_shell=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">            <span class="keyword">if</span> rc == <span class="number">0</span>:</div><div class="line">                c[<span class="string">'cb'</span>](out)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_raid_info_format</span><span class="params">(self, data)</span>:</span></div><div class="line">        <span class="string">""" 阵列卡信息</span></div><div class="line">            Product Name: PERC H710 Mini</div><div class="line">            Memory: 512MB</div><div class="line">            Serial No: 3C801FE</div><div class="line">        :param data:</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        key = [<span class="string">'adapter'</span>, <span class="string">'name'</span>, <span class="string">'memory'</span>, <span class="string">'serial'</span>]</div><div class="line">        v = []</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> data.splitlines():</div><div class="line">            v.append(line.split(<span class="string">': '</span>)[<span class="number">-1</span>].strip())</div><div class="line"> </div><div class="line">        self.facts[<span class="string">'dogo_raid_info'</span>].append(dict(zip(key, v)))</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_raid_level_format</span><span class="params">(self, data)</span>:</span></div><div class="line">        <span class="string">""" 阵列卡级别</span></div><div class="line">            RAID Level          : Primary-1, Secondary-0, RAID Level Qualifier-0</div><div class="line">            Size                : 557.75 GB</div><div class="line">            Number Of Drives per span:2</div><div class="line">            Span Depth          : 2</div><div class="line">        :param data:</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        out_lines = data.splitlines()</div><div class="line">        size_line = out_lines[<span class="number">1</span>]</div><div class="line">        level_line = [out_lines[<span class="number">0</span>]] + out_lines[<span class="number">2</span>:]</div><div class="line"> </div><div class="line">        info = [line.split(<span class="string">':'</span>)[<span class="number">-1</span>].strip() <span class="keyword">for</span> line <span class="keyword">in</span> level_line <span class="keyword">if</span> len(line.split(<span class="string">':'</span>)) == <span class="number">2</span>]</div><div class="line">        <span class="keyword">if</span> len(info) == <span class="number">3</span>:</div><div class="line">            st = [k <span class="keyword">for</span> (k, v) <span class="keyword">in</span> self.level.items() <span class="keyword">if</span> set(info) == set(v)]</div><div class="line">            <span class="keyword">if</span> st:</div><div class="line">                self.facts[<span class="string">'dogo_raid_level'</span>] = st[<span class="number">0</span>]</div><div class="line"> </div><div class="line">        self.facts[<span class="string">'dogo_disk_size'</span>] = module.to_GB(size_line.split(<span class="string">': '</span>)[<span class="number">-1</span>].strip())</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_raid_disk_format</span><span class="params">(self, data)</span>:</span></div><div class="line">        <span class="string">""" 阵列底层磁盘</span></div><div class="line">            Slot Number: 0</div><div class="line">            PD Type: SAS</div><div class="line">            Raw Size: 279.396 GB [0x22ecb25c Sectors]</div><div class="line">            Device Firmware Level: ES66</div><div class="line">            Inquiry Data: SEAGATE ST3300657SS     ES666SJ7CM0P</div><div class="line">            ~~~~</div><div class="line">            Slot Number: 1</div><div class="line">            PD Type: SAS</div><div class="line">            Raw Size: 279.396 GB [0x22ecb25c Sectors]</div><div class="line">            Device Firmware Level: ES66</div><div class="line">            Inquiry Data: SEAGATE ST3300657SS     ES666SJ7CNZV</div><div class="line">            ~~~~</div><div class="line">            Slot Number: 2</div><div class="line">            PD Type: SAS</div><div class="line">            Raw Size: 279.396 GB [0x22ecb25c Sectors]</div><div class="line">            Device Firmware Level: ES66</div><div class="line">            Inquiry Data: SEAGATE ST3300657SS     ES666SJ7RZYA</div><div class="line">            ~~~~</div><div class="line">            Slot Number: 3</div><div class="line">            PD Type: SAS</div><div class="line">            Raw Size: 279.396 GB [0x22ecb25c Sectors]</div><div class="line">            Device Firmware Level: ES66</div><div class="line">            Inquiry Data: SEAGATE ST3300657SS     ES666SJ6L2A8</div><div class="line">        :param result:</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        rt = []</div><div class="line">        i = <span class="number">1</span></div><div class="line">        v = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> data.splitlines():</div><div class="line">            <span class="keyword">if</span> i % <span class="number">5</span> == <span class="number">1</span>:</div><div class="line">                v[<span class="string">'slot_number'</span>] = line.split(<span class="string">': '</span>)[<span class="number">-1</span>]</div><div class="line">            <span class="keyword">elif</span> i % <span class="number">5</span> == <span class="number">2</span>:</div><div class="line">                v[<span class="string">'type'</span>] = line.split(<span class="string">': '</span>)[<span class="number">-1</span>]</div><div class="line">            <span class="keyword">elif</span> i % <span class="number">5</span> == <span class="number">3</span>:</div><div class="line">                v[<span class="string">'size'</span>] = <span class="string">' '</span>.join(line.split(<span class="string">' '</span>)[<span class="number">2</span>:<span class="number">4</span>])</div><div class="line">            <span class="keyword">elif</span> i % <span class="number">5</span> == <span class="number">4</span>:</div><div class="line">                v[<span class="string">'fireware_level'</span>] = line.split(<span class="string">': '</span>)[<span class="number">-1</span>]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                v[<span class="string">'name'</span>] = re.sub(<span class="string">r'[ ]+'</span>, <span class="string">' '</span>, line.split(<span class="string">':'</span>)[<span class="number">-1</span>]).strip()</div><div class="line">                rt.append(v)</div><div class="line">                v = &#123;&#125;</div><div class="line"> </div><div class="line">            i += <span class="number">1</span></div><div class="line"> </div><div class="line">        self.facts[<span class="string">'dogo_raid_disk'</span>] = rt</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_memory_format</span><span class="params">(self, data)</span>:</span></div><div class="line">        <span class="string">""" 内存详细</span></div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        rt = []</div><div class="line">        key = [<span class="string">'size'</span>, <span class="string">'locator'</span>, <span class="string">'type'</span>, <span class="string">'speed'</span>, <span class="string">'serial_number'</span>, <span class="string">'part_number'</span>]</div><div class="line"> </div><div class="line">        RE_MEMORY = re.compile(<span class="string">ur'Memory Device[\s\S]*?'</span></div><div class="line">                               <span class="string">ur'Size:\s+(?P&lt;Size&gt;\d+.*$)[\s\S]*?'</span></div><div class="line">                               <span class="string">ur'Locator:\s+(?P&lt;Locator&gt;\w+)[\s\S]*?'</span></div><div class="line">                               <span class="string">ur'Type:\s+(?P&lt;Type&gt;\w+)[\s\S]*?'</span></div><div class="line">                               <span class="string">ur'Speed:\s+(?P&lt;Speed&gt;.*$)[\s\S]*?'</span></div><div class="line">                               <span class="string">ur'Serial Number:\s+(?P&lt;serial_number&gt;\w+)[\s\S]*?'</span></div><div class="line">                               <span class="string">ur'Part Number:\s+(?P&lt;part_number&gt;\S+)'</span>,</div><div class="line">                               re.M</div><div class="line">        )</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> RE_MEMORY.findall(data):</div><div class="line">            rt.append(dict(zip(key, line)))</div><div class="line"> </div><div class="line">        self.facts[<span class="string">'dogo_memory_detail'</span>] = rt</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> module</div><div class="line">    module = AnsibleModuleBase(</div><div class="line">        argument_spec=dict(</div><div class="line">            gather_subset=dict(default=[<span class="string">"all"</span>], required=<span class="keyword">False</span>, type=<span class="string">'list'</span>),</div><div class="line">            filter=dict(default=<span class="string">"*"</span>, required=<span class="keyword">False</span>),</div><div class="line">            fact_path=dict(default=<span class="string">'/etc/ansible/facts.d'</span>, required=<span class="keyword">False</span>),</div><div class="line">        ),</div><div class="line">        supports_check_mode=<span class="keyword">True</span>,</div><div class="line">    )</div><div class="line">    data = get_all_facts(module)</div><div class="line">    is_virtual_type = <span class="keyword">False</span> <span class="keyword">if</span> data[<span class="string">'ansible_facts'</span>].get(<span class="string">'ansible_virtualization_type'</span>, <span class="string">'NA'</span>) == <span class="string">'NA'</span> <span class="keyword">else</span> <span class="keyword">True</span></div><div class="line">    ex_facts = DogoFacts(is_virtual_type=is_virtual_type).populate()</div><div class="line">    data[<span class="string">'ansible_facts'</span>].update(**ex_facts)</div><div class="line">    module.exit_json(**data)</div><div class="line"> </div><div class="line"><span class="comment"># import module snippets</span></div><div class="line"><span class="keyword">from</span> ansible.module_utils.basic <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> ansible.module_utils.facts <span class="keyword">import</span> *</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnsibleModuleBase</span><span class="params">(AnsibleModule)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        super(AnsibleModuleBase, self).__init__(*args, **kwargs)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pretty_bytes</span><span class="params">(self, size)</span>:</span></div><div class="line">        <span class="comment"># maxsize to GB</span></div><div class="line">        ranges = (</div><div class="line">            <span class="comment"># (1 &lt;&lt; 70, 'ZB'),</span></div><div class="line">            <span class="comment"># (1 &lt;&lt; 60, 'EB'),</span></div><div class="line">            <span class="comment"># (1 &lt;&lt; 50, 'PB'),</span></div><div class="line">            <span class="comment"># (1 &lt;&lt; 40, 'TB'),</span></div><div class="line">            (<span class="number">1</span> &lt;&lt; <span class="number">30</span>, <span class="string">'GB'</span>),</div><div class="line">            (<span class="number">1</span> &lt;&lt; <span class="number">20</span>, <span class="string">'MB'</span>),</div><div class="line">            (<span class="number">1</span> &lt;&lt; <span class="number">10</span>, <span class="string">'KB'</span>),</div><div class="line">            (<span class="number">1</span>, <span class="string">'Bytes'</span>)</div><div class="line">        )</div><div class="line">        <span class="keyword">for</span> limit, suffix <span class="keyword">in</span> ranges:</div><div class="line">            <span class="keyword">if</span> size &gt;= limit:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'%.2f %s'</span> % (float(size) / limit, suffix)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_GB</span><span class="params">(self, data)</span>:</span></div><div class="line">        <span class="comment"># data : '1.58 TB'</span></div><div class="line">        ranges = dict(</div><div class="line">            TB=<span class="number">1</span> &lt;&lt; <span class="number">10</span>,</div><div class="line">            PB=<span class="number">1</span> &lt;&lt; <span class="number">20</span>,</div><div class="line">            EB=<span class="number">1</span> &lt;&lt; <span class="number">30</span>,</div><div class="line">            ZB=<span class="number">1</span> &lt;&lt; <span class="number">40</span></div><div class="line">        )</div><div class="line">        lines = data.split(<span class="string">' '</span>)</div><div class="line"> </div><div class="line">        rt = data</div><div class="line">        <span class="keyword">if</span> lines[<span class="number">-1</span>] <span class="keyword">in</span> ranges:</div><div class="line">            rt = <span class="string">'%.2f GB'</span> % (float(lines[<span class="number">0</span>]) * ranges[lines[<span class="number">1</span>]],)</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> rt</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ansible localhost -m setupex</div></pre></td></tr></table></figure>
<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "ansible_facts": &#123;</div><div class="line">        ...,</div><div class="line">        "dogo_disk_size": "557.75 GB", </div><div class="line">        "dogo_memory_detail": [</div><div class="line">            &#123;</div><div class="line">                "locator": "DIMM_A1", </div><div class="line">                "part_number": "KP9RN2-HYC", </div><div class="line">                "serial_number": "2A2E4CB5", </div><div class="line">                "size": "8192 MB", </div><div class="line">                "speed": "1333 MHz", </div><div class="line">                "type": "DDR3"</div><div class="line">            &#125;, </div><div class="line">            &#123;</div><div class="line">                "locator": "DIMM_A2", </div><div class="line">                "part_number": "9965516-100.A00LF", </div><div class="line">                "serial_number": "363AAE40", </div><div class="line">                "size": "8192 MB", </div><div class="line">                "speed": "1600 MHz", </div><div class="line">                "type": "DDR3"</div><div class="line">            &#125;, </div><div class="line">            &#123;</div><div class="line">                "locator": "DIMM_B1", </div><div class="line">                "part_number": "KP9RN2-HYC", </div><div class="line">                "serial_number": "38363A83", </div><div class="line">                "size": "8192 MB", </div><div class="line">                "speed": "1333 MHz", </div><div class="line">                "type": "DDR3"</div><div class="line">            &#125;, </div><div class="line">            &#123;</div><div class="line">                "locator": "DIMM_B2", </div><div class="line">                "part_number": "HMT31GR7AFR4A-H9", </div><div class="line">                "serial_number": "00000000", </div><div class="line">                "size": "8192 MB", </div><div class="line">                "speed": "1333 MHz", </div><div class="line">                "type": "DDR3"</div><div class="line">            &#125;</div><div class="line">        ], </div><div class="line">        "dogo_raid_disk": [</div><div class="line">            &#123;</div><div class="line">                "fireware_level": "ES66", </div><div class="line">                "name": "SEAGATE ST3300657SS ES666SJ7CM0P", </div><div class="line">                "size": "279.396 GB", </div><div class="line">                "slot_number": "0", </div><div class="line">                "type": "SAS"</div><div class="line">            &#125;, </div><div class="line">            &#123;</div><div class="line">                "fireware_level": "ES66", </div><div class="line">                "name": "SEAGATE ST3300657SS ES666SJ7CNZV", </div><div class="line">                "size": "279.396 GB", </div><div class="line">                "slot_number": "1", </div><div class="line">                "type": "SAS"</div><div class="line">            &#125;, </div><div class="line">            &#123;</div><div class="line">                "fireware_level": "ES66", </div><div class="line">                "name": "SEAGATE ST3300657SS ES666SJ7RZYA", </div><div class="line">                "size": "279.396 GB", </div><div class="line">                "slot_number": "2", </div><div class="line">                "type": "SAS"</div><div class="line">            &#125;, </div><div class="line">            &#123;</div><div class="line">                "fireware_level": "ES66", </div><div class="line">                "name": "SEAGATE ST3300657SS ES666SJ6L2A8", </div><div class="line">                "size": "279.396 GB", </div><div class="line">                "slot_number": "3", </div><div class="line">                "type": "SAS"</div><div class="line">            &#125;</div><div class="line">        ], </div><div class="line">        "dogo_raid_info": [</div><div class="line">            &#123;</div><div class="line">                "adapter": "0", </div><div class="line">                "memory": "512MB", </div><div class="line">                "name": "PERC H710 Mini", </div><div class="line">                "serial": "3C801FE"</div><div class="line">            &#125;</div><div class="line">        ], </div><div class="line">        "dogo_raid_level": "RAID-10", </div><div class="line">        "module_setup": true</div><div class="line">    &#125;, </div><div class="line">    "changed": false</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;为了配合做的资产信息搜集, 直接在setup模块上加上了raid卡,底层的物理磁盘,内存等相关信息.&lt;/p&gt;
&lt;h1 id=&quot;一些改变&quot;&gt;&lt;a href=&quot;#一些改变&quot; class=&quot;headerlink&quot; title=&quot;一些改变&quot;&gt;&lt;/a&gt;一些改变&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;取消了原本关于磁盘单位的自动格式,改为磁盘的最大单位支持到GB,如果需要和原生一下,那在代码文件的 &lt;code&gt;314-317&lt;/code&gt; 行注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;依赖说明&quot;&gt;&lt;a href=&quot;#依赖说明&quot; class=&quot;headerlink&quot; title=&quot;依赖说明&quot;&gt;&lt;/a&gt;依赖说明&lt;/h1&gt;&lt;p&gt;底层的raid和磁盘信息收集需要安装&lt;code&gt;MegaCli64&lt;/code&gt;包,关于安装方法,自行解决.&lt;br&gt;另外关于raid级别,怎么推算成raid5或者raid1+0的. 因为我线上只有这2种,所以如果需要的话,自行解决raid级别的判断.&lt;/p&gt;
&lt;h1 id=&quot;代码文件&quot;&gt;&lt;a href=&quot;#代码文件&quot; class=&quot;headerlink&quot; title=&quot;代码文件&quot;&gt;&lt;/a&gt;代码文件&lt;/h1&gt;&lt;p&gt;把下面的代码保存为扩展模块,比如文件名setupex.py, 放在你&lt;code&gt;ansible.cfg&lt;/code&gt;配置文件中&lt;code&gt;library&lt;/code&gt;定义的路径下.&lt;/p&gt;
    
    </summary>
    
      <category term="ansible" scheme="https://yoncan.github.io/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://yoncan.github.io/tags/ansible/"/>
    
      <category term="python" scheme="https://yoncan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>一个pythoner需要具备的知识</title>
    <link href="https://yoncan.github.io/blog/2016/12/python-study.html"/>
    <id>https://yoncan.github.io/blog/2016/12/python-study.html</id>
    <published>2016-12-29T13:50:41.000Z</published>
    <updated>2017-01-09T15:31:51.629Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>路漫漫其修远兮, 吾将上下而求索</p>
</blockquote>
<p><a href="https://awesome-python.com/" target="_blank" rel="external">https://awesome-python.com/</a><br>奔跑的路上,不要忘了初衷. 也不要停下学习;<br>共勉之.</p>
<a id="more"></a> ]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;路漫漫其修远兮, 吾将上下而求索&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://awesome-python.com/&quot;&gt;https://awesome-python.com/&lt;/a&gt;&lt;br&gt;奔跑的路上,不要忘了初衷. 也不要停下学习;&lt;br&gt;共勉之.&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://yoncan.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://yoncan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>深刻理解Python中的元类(metaclass)</title>
    <link href="https://yoncan.github.io/blog/2016/12/python-metaclass.html"/>
    <id>https://yoncan.github.io/blog/2016/12/python-metaclass.html</id>
    <published>2016-12-10T07:56:30.000Z</published>
    <updated>2017-01-17T14:00:43.844Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载于 <a href="http://blog.jobbole.com/21351/" target="_blank" rel="external">伯乐在线</a> </p>
<footer><strong>http://blog.jobbole.com/21351/</strong></footer></blockquote>
<h1 id="译注"><a href="#译注" class="headerlink" title="译注"></a>译注</h1><p>这是一篇在<a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python" target="_blank" rel="external">Stack overflow</a> 上很热的帖子。提问者自称已经掌握了有关Python OOP编程中的各种概念，但始终觉得元类(metaclass)难以理解。他知道这肯定和自省有关，但仍然觉得不太明白，希望大家可以给出一些实际的例子和代码片段以帮助理解，以及在什么情况下需要进行元编程。于是e-satis同学给出了神一般的回复，该回复获得了985点的赞同点数，更有人评论说这段回复应该加入到Python的官方文档中去。而e-satis同学本人在Stack Overflow中的声望积分也高达64271分。以下就是这篇精彩的回复（提示：非常长）<br><img src="/assert/images/2016-12-10-python-metaclass/python-icon.jpg" alt="python"></p>
<a id="more"></a>
<hr>
<h1 id="类也是对象"><a href="#类也是对象" class="headerlink" title="类也是对象"></a>类也是对象</h1><p>在理解元类之前，你需要先掌握Python中的类。Python中类的概念借鉴于Smalltalk，这显得有些奇特。在大多数编程语言中，类就是一组用来描述如何生成一个对象的代码段。在Python中这一点仍然成立：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ObjectCreator</span><span class="params">(object)</span>:</span></div><div class="line">…       <span class="keyword">pass</span></div><div class="line">…</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>my_object = ObjectCreator()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> my_object</div><div class="line">&lt;__main__.ObjectCreator object at <span class="number">0x8974f2c</span>&gt;</div></pre></td></tr></table></figure></p>
<p>但是，Python中的类还远不止如此。类同样也是一种对象。是的，没错，就是对象。只要你使用关键字class，Python解释器在执行的时候就会创建一个对象。下面的代码段：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ObjectCreator</span><span class="params">(object)</span>:</span></div><div class="line">…       <span class="keyword">pass</span></div><div class="line">…</div></pre></td></tr></table></figure>
<p>将在内存中创建一个对象，名字就是ObjectCreator。<strong>这个对象（类）自身拥有创建对象（类实例）的能力，而这就是为什么它是一个类的原因</strong>。但是，它的本质仍然是一个对象，于是乎你可以对它做如下的操作：</p>
<ol>
<li>你可以将它赋值给一个变量</li>
<li>你可以拷贝它</li>
<li>你可以为它增加属性</li>
<li>你可以将它作为函数参数进行传递</li>
</ol>
<p>下面是示例：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print ObjectCreator     # 你可以打印一个类，因为它其实也是一个对象</div><div class="line">&lt;class '__main__.ObjectCreator'&gt;</div><div class="line">&gt;&gt;&gt; def echo(o):</div><div class="line">…       print o</div><div class="line">…</div><div class="line">&gt;&gt;&gt; echo(ObjectCreator)                 # 你可以将类做为参数传给函数</div><div class="line">&lt;class '__main__.ObjectCreator'&gt;</div><div class="line">&gt;&gt;&gt; print hasattr(ObjectCreator, 'new_attribute')</div><div class="line">Fasle</div><div class="line">&gt;&gt;&gt; ObjectCreator.new_attribute = 'foo' #  你可以为类增加属性</div><div class="line">&gt;&gt;&gt; print hasattr(ObjectCreator, 'new_attribute')</div><div class="line">True</div><div class="line">&gt;&gt;&gt; print ObjectCreator.new_attribute</div><div class="line">foo</div><div class="line">&gt;&gt;&gt; ObjectCreatorMirror = ObjectCreator # 你可以将类赋值给一个变量</div><div class="line">&gt;&gt;&gt; print ObjectCreatorMirror()</div><div class="line">&lt;__main__.ObjectCreator object at 0x8997b4c&gt;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="动态地创建类"><a href="#动态地创建类" class="headerlink" title="动态地创建类"></a>动态地创建类</h1><p>因为类也是对象，你可以在运行时动态的创建它们，就像其他任何对象一样。首先，你可以在函数中创建类，使用class关键字即可。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; def choose_class(name):</div><div class="line">…       if name == 'foo':</div><div class="line">…           class Foo(object):</div><div class="line">…               pass</div><div class="line">…           return Foo     # 返回的是类，不是类的实例</div><div class="line">…       else:</div><div class="line">…           class Bar(object):</div><div class="line">…               pass</div><div class="line">…           return Bar</div><div class="line">…</div><div class="line">&gt;&gt;&gt; MyClass = choose_class('foo')</div><div class="line">&gt;&gt;&gt; print MyClass              # 函数返回的是类，不是类的实例</div><div class="line">&lt;class '__main__'.Foo&gt;</div><div class="line">&gt;&gt;&gt; print MyClass()            # 你可以通过这个类创建类实例，也就是对象</div><div class="line">&lt;__main__.Foo object at 0x89c6d4c&gt;</div></pre></td></tr></table></figure>
<p>但这还不够动态，因为你仍然需要自己编写整个类的代码。由于类也是对象，所以它们必须是通过什么东西来生成的才对。当你使用class关键字时，Python解释器自动创建这个对象。但就和Python中的大多数事情一样，Python仍然提供给你手动处理的方法。还记得内建函数type吗？这个古老但强大的函数能够让你知道一个对象的类型是什么，就像这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> type(<span class="number">1</span>)</div><div class="line">&lt;type <span class="string">'int'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> type(<span class="string">"1"</span>)</div><div class="line">&lt;type <span class="string">'str'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> type(ObjectCreator)</div><div class="line">&lt;type <span class="string">'type'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> type(ObjectCreator())</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">ObjectCreator</span>'&gt;</span></div></pre></td></tr></table></figure>
<p>这里，type有一种完全不同的能力，它也能动态的创建类。type可以接受一个类的描述作为参数，然后返回一个类。（我知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在Python中是为了保持向后兼容性）</p>
<p>type可以像这样工作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">type(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)</div></pre></td></tr></table></figure>
<p>比如下面的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyShinyClass</span><span class="params">(object)</span>:</span></div><div class="line">…       <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>可以手动像这样创建：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; MyShinyClass = type('MyShinyClass', (), &#123;&#125;)  # 返回一个类对象</div><div class="line">&gt;&gt;&gt; print MyShinyClass</div><div class="line">&lt;class '__main__.MyShinyClass'&gt;</div><div class="line">&gt;&gt;&gt; print MyShinyClass()  #  创建一个该类的实例</div><div class="line">&lt;__main__.MyShinyClass object at 0x8997cec&gt;</div></pre></td></tr></table></figure>
<p>你会发现我们使用“MyShinyClass”作为类名，并且也可以把它当做一个变量来作为类的引用。类和变量是不同的，这里没有任何理由把事情弄的复杂。</p>
<p>type 接受一个字典来为类定义属性，因此<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">…       bar = <span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>可以翻译为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>Foo = type(<span class="string">'Foo'</span>, (), &#123;<span class="string">'bar'</span>:<span class="keyword">True</span>&#125;)</div></pre></td></tr></table></figure></p>
<p>并且可以将Foo当成一个普通的类一样使用：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print Foo</div><div class="line">&lt;class '__main__.Foo'&gt;</div><div class="line">&gt;&gt;&gt; print Foo.bar</div><div class="line">True</div><div class="line">&gt;&gt;&gt; f = Foo()</div><div class="line">&gt;&gt;&gt; print f</div><div class="line">&lt;__main__.Foo object at 0x8a9b84c&gt;</div><div class="line">&gt;&gt;&gt; print f.bar</div><div class="line">True</div></pre></td></tr></table></figure>
<p>当然，你可以向这个类继承，所以，如下的代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">FooChild</span><span class="params">(Foo)</span>:</span></div><div class="line">…       <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>就可以写成：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; FooChild = type('FooChild', (Foo,),&#123;&#125;)</div><div class="line">&gt;&gt;&gt; print FooChild</div><div class="line">&lt;class '__main__.FooChild'&gt;</div><div class="line">&gt;&gt;&gt; print FooChild.bar   # bar属性是由Foo继承而来</div><div class="line">True</div></pre></td></tr></table></figure>
<p>最终你会希望为你的类增加方法。只需要定义一个有着恰当签名的函数并将其作为属性赋值就可以了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">echo_bar</span><span class="params">(self)</span>:</span></div><div class="line">…       <span class="keyword">print</span> self.bar</div><div class="line">…</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>FooChild = type(<span class="string">'FooChild'</span>, (Foo,), &#123;<span class="string">'echo_bar'</span>: echo_bar&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(Foo, <span class="string">'echo_bar'</span>)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(FooChild, <span class="string">'echo_bar'</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>my_foo = FooChild()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>my_foo.echo_bar()</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>你可以看到，在Python中，类也是对象，你可以动态的创建类。这就是当你使用关键字class时Python在幕后做的事情，而这就是通过元类来实现的。</p>
<hr>
<h1 id="到底什么是元类（终于到主题了）"><a href="#到底什么是元类（终于到主题了）" class="headerlink" title="到底什么是元类（终于到主题了）"></a>到底什么是元类（终于到主题了）</h1><p>元类就是用来创建类的“东西”。你创建类就是为了创建类的实例对象，不是吗？但是我们已经学习到了Python中的类也是对象。好吧，元类就是用来创建这些类（对象）的，元类就是类的类，你可以这样理解 为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MyClass = MetaClass()</div><div class="line">MyObject = MyClass()</div></pre></td></tr></table></figure></p>
<p>你已经看到了type可以让你像这样做：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyClass = type(<span class="string">'MyClass'</span>, (), &#123;&#125;)</div></pre></td></tr></table></figure></p>
<p>这是因为函数type实际上是一个元类。type就是Python在背后用来创建所有类的元类。现在你想知道那为什么type会全部采用小写形式而不是Type呢？好吧，我猜这是为了和str保持一致性，str是用来创建字符串对象的类，而int是用来创建整数对象的类。type就是创建类对象的类。你可以通过检查<strong>class</strong>属性来看到这一点。Python中所有的东西，注意，我是指所有的东西——都是对象。这包括整数、字符串、函数以及类。它们全部都是对象，而且它们都是从一个类创建而来。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="number">35</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>age.__class__</div><div class="line">&lt;type <span class="string">'int'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">'bob'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name.__class__</div><div class="line">&lt;type <span class="string">'str'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span> <span class="keyword">pass</span></div><div class="line">&gt;&gt;&gt;foo.__class__</div><div class="line">&lt;type <span class="string">'function'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Bar</span><span class="params">(object)</span>:</span> <span class="keyword">pass</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = Bar()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.__class__</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Bar</span>'&gt;</span></div></pre></td></tr></table></figure>
<p>现在，对于任何一个<strong>class</strong>的<strong>class</strong>属性又是什么呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.__class__.__class__</div><div class="line">&lt;type <span class="string">'type'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>age.__class__.__class__</div><div class="line">&lt;type <span class="string">'type'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>foo.__class__.__class__</div><div class="line">&lt;type <span class="string">'type'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.__class__.__class__</div><div class="line">&lt;type <span class="string">'type'</span>&gt;</div></pre></td></tr></table></figure></p>
<p>因此，元类就是创建类这种对象的东西。如果你喜欢的话，可以把元类称为“类工厂”（不要和工厂类搞混了:D） type就是Python的内建元类，当然了，你也可以创建自己的元类。</p>
<hr>
<h1 id="metaclass属性"><a href="#metaclass属性" class="headerlink" title="metaclass属性"></a><strong>metaclass</strong>属性</h1><p>你可以在写一个类的时候为其添加<strong>metaclass</strong>属性。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">	__metaclass__ = something…</div><div class="line">[…]</div></pre></td></tr></table></figure></p>
<p>如果你这么做了，Python就会用元类来创建类Foo。小心点，这里面有些技巧。你首先写下class Foo(object)，但是类对象Foo还没有在内存中创建。Python会在类的定义中寻找<strong>metaclass</strong>属性，如果找到了，Python就会用它来创建类Foo，如果没有找到，就会用内建的type来创建这个类。把下面这段话反复读几次。当你写如下代码时 :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(Bar)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>Python做了如下的操作：</p>
<p>Foo中有<strong>metaclass</strong>这个属性吗？如果是，Python会在内存中通过<strong>metaclass</strong>创建一个名字为Foo的类对象（我说的是类对象，请紧跟我的思路）。如果Python没有找到<strong>metaclass</strong>，它会继续在Bar（父类）中寻找<strong>metaclass</strong>属性，并尝试做和前面同样的操作。如果Python在任何父类中都找不到<strong>metaclass</strong>，它就会在模块层次中去寻找<strong>metaclass</strong>，并尝试做同样的操作。如果还是找不到<strong>metaclass</strong>,Python就会用内置的type来创建这个类对象。</p>
<p>现在的问题就是，你可以在<strong>metaclass</strong>中放置些什么代码呢？答案就是：可以创建一个类的东西。那么什么可以用来创建一个类呢？type，或者任何使用到type或者子类化type的东东都可以。</p>
<hr>
<h1 id="自定义元类"><a href="#自定义元类" class="headerlink" title="自定义元类"></a>自定义元类</h1><p>元类的主要目的就是为了当创建类时能够自动地改变类。通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。假想一个很傻的例子，你决定在你的模块里所有的类的属性都应该是大写形式。有好几种方法可以办到，但其中一种就是通过在模块级别设定<strong>metaclass</strong>。采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改成大写形式就万事大吉了。</p>
<p>幸运的是，<strong>metaclass</strong>实际上可以被任意调用，它并不需要是一个正式的类（我知道，某些名字里带有‘class’的东西并不需要是一个class，画画图理解下，这很有帮助）。所以，我们这里就先以一个简单的函数作为例子开始。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 元类会自动将你通常传给‘type’的参数作为自己的参数传入</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upper_attr</span><span class="params">(future_class_name, future_class_parents, future_class_attr)</span>:</span></div><div class="line">    <span class="string">'''返回一个类对象，将属性都转为大写形式'''</span></div><div class="line">    <span class="comment">#  选择所有不以'__'开头的属性</span></div><div class="line">    attrs = ((name, value) <span class="keyword">for</span> name, value <span class="keyword">in</span> future_class_attr.items() <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'__'</span>))</div><div class="line"></div><div class="line">        <span class="comment"># 将它们转为大写形式</span></div><div class="line">    uppercase_attr = dict((name.upper(), value) <span class="keyword">for</span> name, value <span class="keyword">in</span> attrs)</div><div class="line"> </div><div class="line">    <span class="comment"># 通过'type'来做类对象的创建</span></div><div class="line">    <span class="keyword">return</span> type(future_class_name, future_class_parents, uppercase_attr)</div><div class="line"> </div><div class="line"> </div><div class="line">__metaclass__ = upper_attr  <span class="comment">#  这会作用到这个模块中的所有类</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="comment"># 我们也可以只在这里定义__metaclass__，这样就只会作用于这个类中</span></div><div class="line">    bar = <span class="string">'bip'</span></div><div class="line">    </div><div class="line">    </div><div class="line"><span class="keyword">print</span> hasattr(Foo, <span class="string">'bar'</span>)</div><div class="line"><span class="comment"># 输出: False</span></div><div class="line"><span class="keyword">print</span> hasattr(Foo, <span class="string">'BAR'</span>)</div><div class="line"><span class="comment"># 输出:True</span></div><div class="line"> </div><div class="line">f = Foo()</div><div class="line"><span class="keyword">print</span> f.BAR</div><div class="line"><span class="comment"># 输出:'bip'</span></div></pre></td></tr></table></figure>
<p>现在让我们再做一次，这一次用一个真正的class来当做元类。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 请记住，'type'实际上是一个类，就像'str'和'int'一样</span></div><div class="line"><span class="comment"># 所以，你可以从type继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaClass</span><span class="params">(type)</span>:</span></div><div class="line">    <span class="comment"># __new__ 是在__init__之前被调用的特殊方法</span></div><div class="line">    <span class="comment"># __new__是用来创建对象并返回之的方法</span></div><div class="line">    <span class="comment"># 而__init__只是用来将传入的参数初始化给对象</span></div><div class="line">    <span class="comment"># 你很少用到__new__，除非你希望能够控制对象的创建</span></div><div class="line">    <span class="comment"># 这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__</span></div><div class="line">    <span class="comment"># 如果你希望的话，你也可以在__init__中做些事情</span></div><div class="line">    <span class="comment"># 还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr)</span>:</span></div><div class="line">        attrs = ((name, value) <span class="keyword">for</span> name, value <span class="keyword">in</span> future_class_attr.items() <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'__'</span>))</div><div class="line">        uppercase_attr = dict((name.upper(), value) <span class="keyword">for</span> name, value <span class="keyword">in</span> attrs)</div><div class="line">        <span class="keyword">return</span> type(future_class_name, future_class_parents, uppercase_attr)</div></pre></td></tr></table></figure>
<p>但是，这种方式其实不是OOP。我们直接调用了type，而且我们没有改写父类的<strong>new</strong>方法。现在让我们这样去处理:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaclass</span><span class="params">(type)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr)</span>:</span></div><div class="line">        attrs = ((name, value) <span class="keyword">for</span> name, value <span class="keyword">in</span> future_class_attr.items() <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'__'</span>))</div><div class="line">        uppercase_attr = dict((name.upper(), value) <span class="keyword">for</span> name, value <span class="keyword">in</span> attrs)</div><div class="line"> </div><div class="line">        <span class="comment"># 复用type.__new__方法</span></div><div class="line">        <span class="comment"># 这就是基本的OOP编程，没什么魔法</span></div><div class="line">        <span class="keyword">return</span> type.__new__(upperattr_metaclass, future_class_name, future_class_parents, uppercase_attr)</div></pre></td></tr></table></figure>
<p>你可能已经注意到了有个额外的参数upperattr_metaclass，这并没有什么特别的。类方法的第一个参数总是表示当前的实例，就像在普通的类方法中的self参数一样。当然了，为了清晰起见，这里的名字我起的比较长。但是就像self一样，所有的参数都有它们的传统名称。因此，在真实的产品代码中一个元类应该是像这样的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaclass</span><span class="params">(type)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, dct)</span>:</span></div><div class="line">        attrs = ((name, value) <span class="keyword">for</span> name, value <span class="keyword">in</span> dct.items() <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'__'</span>)</div><div class="line">        uppercase_attr  = dict((name.upper(), value) <span class="keyword">for</span> name, value <span class="keyword">in</span> attrs)</div><div class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, uppercase_attr)</div></pre></td></tr></table></figure>
<p>如果使用super方法的话，我们还可以使它变得更清晰一些，这会缓解继承（是的，你可以拥有元类，从元类继承，从type继承）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaclass</span><span class="params">(type)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, dct)</span>:</span></div><div class="line">        attrs = ((name, value) <span class="keyword">for</span> name, value <span class="keyword">in</span> dct.items() <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'__'</span>))</div><div class="line">        uppercase_attr = dict((name.upper(), value) <span class="keyword">for</span> name, value <span class="keyword">in</span> attrs)</div><div class="line">        <span class="keyword">return</span> super(UpperAttrMetaclass, cls).__new__(cls, name, bases, uppercase_attr)</div></pre></td></tr></table></figure></p>
<p>就是这样，除此之外，关于元类真的没有别的可说的了。使用到元类的代码比较复杂，这背后的原因倒并不是因为元类本身，而是因为你通常会使用元类去做一些晦涩的事情，依赖于自省，控制继承等等。确实，用元类来搞些“黑暗魔法”是特别有用的，因而会搞出些复杂的东西来。但就元类本身而言，它们其实是很简单的：</p>
<ol>
<li><strong>拦截类的创建</strong></li>
<li><strong>修改类</strong></li>
<li><strong>返回修改之后的类</strong></li>
</ol>
<h1 id="为什么要用metaclass类而不是函数"><a href="#为什么要用metaclass类而不是函数" class="headerlink" title="为什么要用metaclass类而不是函数?"></a>为什么要用metaclass类而不是函数?</h1><p>由于<strong>metaclass</strong>可以接受任何可调用的对象，那为何还要使用类呢，因为很显然使用类会更加复杂啊？这里有好几个原因：</p>
<ol>
<li><p>意图会更加清晰。当你读到UpperAttrMetaclass(type)时，你知道接下来要发生什么。</p>
</li>
<li><p>你可以使用OOP编程。元类可以从元类中继承而来，改写父类的方法。元类甚至还可以使用元类。</p>
</li>
<li><p>你可以把代码组织的更好。当你使用元类的时候肯定不会是像我上面举的这种简单场景，通常都是针对比较复杂的问题。将多个方法归总到一个类中会很有帮助，也会使得代码更容易阅读。</p>
</li>
<li><p>你可以使用<strong>new</strong>, <strong>init</strong>以及<strong>call</strong>这样的特殊方法。它们能帮你处理不同的任务。就算通常你可以把所有的东西都在<strong>new</strong>里处理掉，有些人还是觉得用<strong>init</strong>更舒服些。</p>
</li>
<li><p>哇哦，这东西的名字是metaclass，肯定非善类，我要小心！</p>
</li>
</ol>
<hr>
<h1 id="究竟为什么要使用元类？"><a href="#究竟为什么要使用元类？" class="headerlink" title="究竟为什么要使用元类？"></a>究竟为什么要使用元类？</h1><p>现在回到我们的大主题上来，究竟是为什么你会去使用这样一种容易出错且晦涩的特性？好吧，一般来说，你根本就用不上它：</p>
<blockquote><p>元类就是深度的魔法，99%的用户应该根本不必为此操心。如果你想搞清楚究竟是否需要用到元类，那么你就不需要它。那些实际用到元类的人都非常清楚地知道他们需要做什么，而且根本不需要解释为什么要用元类。</p>
<footer><strong>Python界的领袖</strong><cite>Tim Peters</cite></footer></blockquote>
<p>元类的主要用途是创建API。一个典型的例子是Django ORM。它允许你像这样定义：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">30</span>)</div><div class="line">    age = models.IntegerField()</div></pre></td></tr></table></figure></p>
<p>但是如果你像这样做的话：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">guy  = Person(name=<span class="string">'bob'</span>, age=<span class="string">'35'</span>)</div><div class="line"><span class="keyword">print</span> guy.age</div></pre></td></tr></table></figure>
<p>这并不会返回一个IntegerField对象，而是会返回一个int，甚至可以直接从数据库中取出数据。这是有可能的，因为models.Model定义了<strong>metaclass</strong>， 并且使用了一些魔法能够将你刚刚定义的简单的Person类转变成对数据库的一个复杂hook。Django框架将这些看起来很复杂的东西通过暴露出一个简单的使用元类的API将其化简，通过这个API重新创建代码，在背后完成真正的工作。</p>
<hr>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>首先，你知道了类其实是能够创建出类实例的对象。好吧，事实上，类本身也是实例，当然，它们是元类的实例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span> <span class="keyword">pass</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(Foo)</div><div class="line"><span class="number">142630324</span></div></pre></td></tr></table></figure></p>
<p>Python中的一切都是对象，它们要么是类的实例，要么是元类的实例，除了type。type实际上是它自己的元类，在纯Python环境中这可不是你能够做到的，这是通过在实现层面耍一些小手段做到的。其次，元类是很复杂的。对于非常简单的类，你可能不希望通过使用元类来对类做修改。你可以通过其他两种技术来修改类：</p>
<ol>
<li><p><a href="http://en.wikipedia.org/wiki/Monkey_patch" target="_blank" rel="external">Monkey patching</a></p>
</li>
<li><p>class decorators</p>
</li>
</ol>
<p>当你需要动态修改类时，99%的时间里你最好使用上面这两种技术。当然了，其实在99%的时间里你根本就不需要动态修改类 :D</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;转载于 &lt;a href=&quot;http://blog.jobbole.com/21351/&quot;&gt;伯乐在线&lt;/a&gt; &lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;http://blog.jobbole.com/21351/&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;h1 id=&quot;译注&quot;&gt;&lt;a href=&quot;#译注&quot; class=&quot;headerlink&quot; title=&quot;译注&quot;&gt;&lt;/a&gt;译注&lt;/h1&gt;&lt;p&gt;这是一篇在&lt;a href=&quot;http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python&quot;&gt;Stack overflow&lt;/a&gt; 上很热的帖子。提问者自称已经掌握了有关Python OOP编程中的各种概念，但始终觉得元类(metaclass)难以理解。他知道这肯定和自省有关，但仍然觉得不太明白，希望大家可以给出一些实际的例子和代码片段以帮助理解，以及在什么情况下需要进行元编程。于是e-satis同学给出了神一般的回复，该回复获得了985点的赞同点数，更有人评论说这段回复应该加入到Python的官方文档中去。而e-satis同学本人在Stack Overflow中的声望积分也高达64271分。以下就是这篇精彩的回复（提示：非常长）&lt;br&gt;&lt;img src=&quot;/assert/images/2016-12-10-python-metaclass/python-icon.jpg&quot; alt=&quot;python&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://yoncan.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://yoncan.github.io/tags/python/"/>
    
      <category term="metaclass" scheme="https://yoncan.github.io/tags/metaclass/"/>
    
  </entry>
  
  <entry>
    <title>运维后台功能介绍</title>
    <link href="https://yoncan.github.io/blog/2016/11/yunwei-houtai.html"/>
    <id>https://yoncan.github.io/blog/2016/11/yunwei-houtai.html</id>
    <published>2016-11-09T16:01:21.000Z</published>
    <updated>2017-01-09T16:15:28.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后台的架构图"><a href="#后台的架构图" class="headerlink" title="后台的架构图"></a>后台的架构图</h1><p><img src="/assert/images/2016-11-10-yunwei-houtai/modal.jpg" alt="后台的架构图"><br>功能的介绍</p>
<ul>
<li>使用的是flask框架开发,前端用的BootStrap+Jquery.</li>
<li>任务的使用的是celery异步框架,这样就剥离了前端与后端的阻塞.</li>
<li>后台与各个服务器端通信使用的ZeroMQ,它的python库为Pyzmq. 利用到了一个常用的模型Pub/Sub, 实时交互Req/Rep等</li>
<li>数据库层了, Redis作为Celery的Broker,同时会做为一些数据的缓存. 同时使用SQLAlchemy做为ORM,谁用谁知道.</li>
<li>Agent端的任务执行,全部使用Python模块化处理了,执行指定的任务,就调用对应编排好的任务; 任务使用多线程执行的,执行完成之后把结果推送到处理结果的队列中, 再由结果队列Push到后台的Log Collector日志搜集端. 由LogCollector处理返回的日志并格式化入库.</li>
</ul>
<a id="more"></a>
<hr>
<h1 id="页面的一些截图"><a href="#页面的一些截图" class="headerlink" title="页面的一些截图"></a>页面的一些截图</h1><h2 id="后台首页"><a href="#后台首页" class="headerlink" title="后台首页"></a>后台首页</h2><p><img src="/assert/images/2016-11-10-yunwei-houtai/dogo_dashboard.png" alt="后台的架构图"></p>
<h2 id="游戏服管理"><a href="#游戏服管理" class="headerlink" title="游戏服管理"></a>游戏服管理</h2><p>支持自动部署,快速新建,因为是windows服务器,所以所有游戏服操作, 用ZMQ写了一套C/S架构,有点类似于salt的一套程序.<br><img src="/assert/images/2016-11-10-yunwei-houtai/dogo_gameserver.png" alt="后台的架构图"></p>
<h2 id="游戏组管理"><a href="#游戏组管理" class="headerlink" title="游戏组管理"></a>游戏组管理</h2><p>底层部署是利用ansible api完成<br><img src="/assert/images/2016-11-10-yunwei-houtai/dogo_gamegroup.png" alt="后台的架构图"></p>
<h2 id="指令操作"><a href="#指令操作" class="headerlink" title="指令操作"></a>指令操作</h2><p>对游戏服进行一些指令操作.都是用ZMQ写的接口实现的<br><img src="/assert/images/2016-11-10-yunwei-houtai/dogo_gamecmd.png" alt="后台的架构图"></p>
<h2 id="前端资源列表"><a href="#前端资源列表" class="headerlink" title="前端资源列表"></a>前端资源列表</h2><p><img src="/assert/images/2016-11-10-yunwei-houtai/dogo_game_url.png" alt="后台的架构图"></p>
<h2 id="游戏更新"><a href="#游戏更新" class="headerlink" title="游戏更新"></a>游戏更新</h2><p>分为前后端更新.<br><img src="/assert/images/2016-11-10-yunwei-houtai/game_update.png" alt="后台的架构图"></p>
<h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><p>所有的执行操作都是用的celery实现的异步化, 提交的任务在这里总览<br><img src="/assert/images/2016-11-10-yunwei-houtai/game_tasks.png" alt="后台的架构图"><br>执行任务的一些详情<br><img src="/assert/images/2016-11-10-yunwei-houtai/game_detail.png" alt="后台的架构图"></p>
<h2 id="SVN的在线更新"><a href="#SVN的在线更新" class="headerlink" title="SVN的在线更新"></a>SVN的在线更新</h2><p>这个是实时返回输出的. 之后的Ansible Gui开发,也是会用到socket.io的<br><img src="/assert/images/2016-11-10-yunwei-houtai/game_svn.png" alt="后台的架构图"></p>
<h2 id="CDN推送"><a href="#CDN推送" class="headerlink" title="CDN推送"></a>CDN推送</h2><p>把公司用到的CDN使用都API化,实现统一的一个推送界面<br><img src="/assert/images/2016-11-10-yunwei-houtai/game_pushcdn.png" alt="后台的架构图"></p>
<h2 id="资产的管理"><a href="#资产的管理" class="headerlink" title="资产的管理"></a>资产的管理</h2><p>只需要录入初始的IP, 就可以用ansible 的api自动采集硬件信息,变更的记录也弄成了一个时间序列形式的展示<br><img src="/assert/images/2016-11-10-yunwei-houtai/game_cmdb.png" alt="后台的架构图"><br><img src="/assert/images/2016-11-10-yunwei-houtai/game_cmdb_changelog.png" alt="后台的架构图"></p>
<h2 id="Host主机的一些变量设置"><a href="#Host主机的一些变量设置" class="headerlink" title="Host主机的一些变量设置"></a>Host主机的一些变量设置</h2><p>如果你了解ansible. 那你就知道这是在干啥了.</p>
<p><img src="/assert/images/2016-11-10-yunwei-houtai/dogo_game_cmdb_profile.png" alt="后台的架构图"></p>
<hr>
<h2 id="用户中心的管理"><a href="#用户中心的管理" class="headerlink" title="用户中心的管理"></a>用户中心的管理</h2><p>包括用户管理/小组管理/部门管理/权限模块管理.权限的设计模型.<br>用户可以加入到用户小组中, 一个部门下面可以有多个小组. 部门管理员可以对本部门拥有的权限,授权到小组中.可以自己管理本部门下小组/用户; 所有小组作为最小的权限单元,只要用户加入到所属部门的小组中,就自动集成小组权限. 小组拥有的权限, 最大受限于部门拥有哪些权限.</p>
<p><img src="/assert/images/2016-11-10-yunwei-houtai/game_dept.png" alt="后台的架构图"><br><img src="/assert/images/2016-11-10-yunwei-houtai/game_dept_detail.png" alt="后台的架构图"></p>
<p><img src="/assert/images/2016-11-10-yunwei-houtai/game_module.png" alt="后台的架构图"></p>
<p><img src="/assert/images/2016-11-10-yunwei-houtai/game_role.png" alt="后台的架构图"></p>
<p><img src="/assert/images/2016-11-10-yunwei-houtai/game_user.png" alt="后台的架构图"></p>
<hr>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>项目的源码,待整理完成之后,在公布出去.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;后台的架构图&quot;&gt;&lt;a href=&quot;#后台的架构图&quot; class=&quot;headerlink&quot; title=&quot;后台的架构图&quot;&gt;&lt;/a&gt;后台的架构图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/assert/images/2016-11-10-yunwei-houtai/modal.jpg&quot; alt=&quot;后台的架构图&quot;&gt;&lt;br&gt;功能的介绍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用的是flask框架开发,前端用的BootStrap+Jquery.&lt;/li&gt;
&lt;li&gt;任务的使用的是celery异步框架,这样就剥离了前端与后端的阻塞.&lt;/li&gt;
&lt;li&gt;后台与各个服务器端通信使用的ZeroMQ,它的python库为Pyzmq. 利用到了一个常用的模型Pub/Sub, 实时交互Req/Rep等&lt;/li&gt;
&lt;li&gt;数据库层了, Redis作为Celery的Broker,同时会做为一些数据的缓存. 同时使用SQLAlchemy做为ORM,谁用谁知道.&lt;/li&gt;
&lt;li&gt;Agent端的任务执行,全部使用Python模块化处理了,执行指定的任务,就调用对应编排好的任务; 任务使用多线程执行的,执行完成之后把结果推送到处理结果的队列中, 再由结果队列Push到后台的Log Collector日志搜集端. 由LogCollector处理返回的日志并格式化入库.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="flask" scheme="https://yoncan.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://yoncan.github.io/tags/flask/"/>
    
      <category term="python" scheme="https://yoncan.github.io/tags/python/"/>
    
      <category term="pyzmq" scheme="https://yoncan.github.io/tags/pyzmq/"/>
    
  </entry>
  
  <entry>
    <title>flask sqlalchemy序列化查询结果</title>
    <link href="https://yoncan.github.io/blog/2016/09/flask-sqlalchemy-seriablize.html"/>
    <id>https://yoncan.github.io/blog/2016/09/flask-sqlalchemy-seriablize.html</id>
    <published>2016-09-09T16:16:49.000Z</published>
    <updated>2017-01-17T14:00:43.844Z</updated>
    
    <content type="html"><![CDATA[<p>在flask开发运维后台的时候, 比较多的需求是, 从数据库取得结果, 需要序列化之后传递给前端的表格插件.</p>
<p>下面我们创建一个基类, 在定义model的时候, 继承就可以达到想要的结果了</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerializeMixin</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">'Mixin for retrieving public fields of model in json-compatible format'</span></div><div class="line"></div><div class="line">    __public__ = <span class="keyword">None</span></div><div class="line">    __exclude__ = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_json</span><span class="params">(self, exclude=[], include=[], only=[], convert=True, replace=False, extend=&#123;&#125;, **kwargs)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :param exclude: 在转化时指定需要排除的字段列表</div><div class="line">        :param include: 在转化时指定需要包含的字段列表</div><div class="line">        :param only:    在转化时指定仅仅包含的字段列表</div><div class="line">        :param convert: 附加转换结果显示,当需要转换值的显示成指定的状态值使用, 状态值需要在kwargs指定.\</div><div class="line">                     &#123;'status': &#123;'0': u'正常', '1': u'故障',...&#125;&#125;, 将会在返回的字段中附加一个同名的且前面加'_'的字段,\</div><div class="line">                     当status的值为'0'时, 那返回值会附加的'_status'字段,且'_status'字段值为u'正常'.</div><div class="line">                    当存在外键的时候, 会获取外键中是否有'_get_public'方法,有的化将显示一个友好的值.</div><div class="line"></div><div class="line">        :param replace: 当为True时,将不会产生_下划线的转换字段,而是直接替换</div><div class="line">        :param extend: 扩充值, 想格式化的json字符串扩充值,主要是解决外键引用而又想显示值</div><div class="line">        :param kwargs:</div><div class="line">        :return:</div><div class="line">        """</div><div class="line"></div><div class="line">        data = &#123;&#125;</div><div class="line">        items = self._sa_instance_state.attrs.items()</div><div class="line">        column_name = self._sa_instance_state.attrs.keys()</div><div class="line">        self.convert = convert</div><div class="line">        self.kwargs = kwargs</div><div class="line"></div><div class="line">        <span class="keyword">if</span> only:</div><div class="line">            <span class="string">""" If you specify the parameters of only """</span></div><div class="line">            _public = set(only)</div><div class="line">            _exclude = set([])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> self.__public__ <span class="keyword">and</span> self.__exclude__ <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                <span class="string">""" __public__ is True and __exclude__ is False """</span></div><div class="line">                _public = self.__public__</div><div class="line">                _exclude = []</div><div class="line">            <span class="keyword">elif</span> self.__public__ <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> self.__exclude__:</div><div class="line">                <span class="string">""" __public__ is False and __exclude__ is True """</span></div><div class="line">                _public = []</div><div class="line">                _exclude = self.__exclude__</div><div class="line">            <span class="keyword">elif</span> self.__public__ <span class="keyword">and</span> self.__exclude__:</div><div class="line">                <span class="string">""" __public__ is True and __exclude__ is True """</span></div><div class="line">                _exclude = self.__exclude__</div><div class="line">                _public = set(self.__public__) - set(_exclude)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="string">""" __public__ is False and __exclude__ is False """</span></div><div class="line">                _public = column_name</div><div class="line">                _exclude = []</div><div class="line"></div><div class="line">            <span class="keyword">if</span> exclude:</div><div class="line">                <span class="string">""" If you specify the parameters of exclude """</span></div><div class="line">                _exclude = set(_exclude + exclude)</div><div class="line"></div><div class="line">            <span class="keyword">if</span> include:</div><div class="line">                <span class="string">""" If you specify the parameters of include """</span></div><div class="line">                _public = set(_public + include) - set(_exclude)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> key, field <span class="keyword">in</span> items:</div><div class="line">            <span class="keyword">if</span> _public <span class="keyword">and</span> key <span class="keyword">not</span> <span class="keyword">in</span> _public: <span class="keyword">continue</span></div><div class="line">            <span class="keyword">if</span> key <span class="keyword">in</span> _exclude: <span class="keyword">continue</span></div><div class="line"></div><div class="line">            value = self._serialize(field.value)</div><div class="line"></div><div class="line">            data[key] = value</div><div class="line">            <span class="keyword">if</span> convert <span class="keyword">and</span> kwargs <span class="keyword">and</span> kwargs.has_key(key):</div><div class="line">                <span class="keyword">if</span> replace <span class="keyword">is</span> <span class="keyword">True</span>:</div><div class="line">                    _key = <span class="string">'%s'</span> % key</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    _key = <span class="string">'_%s'</span> % key</div><div class="line"></div><div class="line">                data[_key] = kwargs.get(key, value)</div><div class="line">                <span class="comment"># data[_key] = kwargs[key].get(value, value)</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> extend:</div><div class="line">            data.update(extend)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> data</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_serialize</span><span class="params">(cls, value, follow_fk=False)</span>:</span></div><div class="line">        ret = value</div><div class="line"></div><div class="line">        <span class="keyword">if</span> isinstance(value, datetime.datetime) <span class="keyword">or</span> isinstance(value, datetime.date):</div><div class="line">            ret = str(value)</div><div class="line">        <span class="keyword">elif</span> isinstance(value, uuid.UUID):</div><div class="line">            ret = str(value)</div><div class="line"></div><div class="line">        <span class="keyword">elif</span> BaseModelMixin <span class="keyword">in</span> value.__class__.__bases__ <span class="keyword">or</span> SerializeMixin <span class="keyword">in</span> value.__class__.__bases__:</div><div class="line">            <span class="comment"># 一对多或者多对一</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                ret = value._get_public()</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">pass</span></div><div class="line">        <span class="keyword">elif</span> AppenderMixin <span class="keyword">in</span> value.__class__.__bases__:</div><div class="line">            <span class="comment"># 多对多</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                ret = [x._get_public() <span class="keyword">for</span> x <span class="keyword">in</span> value.all()]</div><div class="line">            <span class="keyword">except</span> Exception, ex:</div><div class="line">                <span class="keyword">print</span> <span class="string">'many to many : '</span>, ex</div><div class="line"></div><div class="line">        <span class="keyword">elif</span> hasattr(value, <span class="string">'__iter__'</span>):</div><div class="line">            <span class="comment"># 迭代对象</span></div><div class="line">            <span class="comment"># Don't set True</span></div><div class="line">            <span class="keyword">if</span> follow_fk:</div><div class="line">                ret = []</div><div class="line">                <span class="keyword">for</span> v <span class="keyword">in</span> value:</div><div class="line">                    ret.append(cls._serialize(v))</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ret</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModelMixin</span><span class="params">(SerializeMixin)</span>:</span></div><div class="line">    <span class="string">""" 定义基础的Model用于继承 """</span></div><div class="line"></div><div class="line">    __table_args__ = &#123;</div><div class="line">        <span class="string">'mysql_engine'</span>: <span class="string">u'InnoDB'</span>,</div><div class="line">        <span class="string">'mysql_default_charset'</span>: <span class="string">u'utf8'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'name'</span>):</div><div class="line">            <span class="keyword">return</span> <span class="string">'&lt;%s %s&gt;'</span> % (self.__class__.__name__, self.name)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'&lt;%s %s&gt;'</span> % (self.__class__.__name__, self.id )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_public</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" 当存在外键的时候, 一个友好的显示名称 """</span></div><div class="line"></div><div class="line">        ret = self</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> hasattr(self, <span class="string">'name'</span>):</div><div class="line">                rt = self.name</div><div class="line">            <span class="keyword">elif</span> hasattr(self, <span class="string">'id'</span>):</div><div class="line">                rt = self.id</div><div class="line">        <span class="keyword">except</span> Exception, ex:</div><div class="line">            <span class="keyword">print</span> <span class="string">'_get_public error:%s'</span> % str(ex)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> rt</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></div><div class="line">        db.session.add(self)</div><div class="line">        db.session.commit()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self)</span>:</span></div><div class="line">        db.session.delete(self)</div><div class="line">        db.session.commit()</div></pre></td></tr></table></figure>
<p>在model定义时, 可以选指定在子类中指定需要序列化的字段<strong>public</strong> 或者 <strong>exculde</strong> 指定需要排除的字段, 注意当model中定义了外键的时候,稍后在做解释.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(db.Model, BaseModelMixin)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'test'</span></div><div class="line">    __public__ = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'email'</span>]</div><div class="line"> </div><div class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>, autoincrement=<span class="keyword">True</span>)</div><div class="line">    name = db.Column(db.String(<span class="number">100</span>), nullable=<span class="keyword">False</span>)</div><div class="line">    email = db.Column(db.String(<span class="number">100</span>), nullable=<span class="keyword">False</span>, unique=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;Test %r&gt;'</span> % self.name</div></pre></td></tr></table></figure>
<p>当然也可以不用指定<strong>public</strong>. 这样就会序列化Test 的全部的表字段, 下面做一些测试</p>
<p>测试2中情况:</p>
<ol>
<li>指定<strong>public</strong> 字段 或者 指定<strong>exclude</strong> 字段;</li>
<li>什么都不指定, 在查询的时候, 才指定</li>
<li>下面是指定了<strong>public</strong> 字段时的结果,  <strong>exclude</strong> 就不在演示了</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">In [<span class="number">5</span>]: db.session.execute(Test.__table__.insert(), [dict(name=<span class="string">'name_%s'</span>%x, email=<span class="string">'%s@qq.com'</span>% x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>)])</div><div class="line">Out[<span class="number">5</span>]: &lt;sqlalchemy.engine.result.ResultProxy at <span class="number">0x4737e50</span>&gt;</div><div class="line"> </div><div class="line">In [<span class="number">6</span>]: db.session.commit()</div><div class="line">In [<span class="number">7</span>]: Test.query.all()</div><div class="line">Out[<span class="number">7</span>]: </div><div class="line">[&lt;Test <span class="string">u'name_1'</span>&gt;,</div><div class="line"> &lt;Test <span class="string">u'name_1'</span>&gt;,</div><div class="line"> &lt;Test <span class="string">u'name_1'</span>&gt;,</div><div class="line"> &lt;Test <span class="string">u'name_2'</span>&gt;,</div><div class="line"> &lt;Test <span class="string">u'name_3'</span>&gt;,</div><div class="line"> &lt;Test <span class="string">u'name_4'</span>&gt;,</div><div class="line"> &lt;Test <span class="string">u'name_5'</span>&gt;,</div><div class="line"> &lt;Test <span class="string">u'name_6'</span>&gt;,</div><div class="line"> &lt;Test <span class="string">u'name_7'</span>&gt;,</div><div class="line"> &lt;Test <span class="string">u'name_8'</span>&gt;,</div><div class="line"> &lt;Test <span class="string">u'name_9'</span>&gt;]</div><div class="line"> </div><div class="line">In [<span class="number">8</span>]: [ x.to_json() <span class="keyword">for</span> x <span class="keyword">in</span> Test.query.all() ]</div><div class="line">Out[<span class="number">8</span>]: </div><div class="line">[&#123;<span class="string">'id'</span>: <span class="number">1L</span>, <span class="string">'name'</span>: <span class="string">u'name_1'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'%s@qq.com'</span>, <span class="string">'id'</span>: <span class="number">3L</span>, <span class="string">'name'</span>: <span class="string">u'name_1'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'1@qq.com'</span>, <span class="string">'id'</span>: <span class="number">5L</span>, <span class="string">'name'</span>: <span class="string">u'name_1'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'2@qq.com'</span>, <span class="string">'id'</span>: <span class="number">6L</span>, <span class="string">'name'</span>: <span class="string">u'name_2'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'3@qq.com'</span>, <span class="string">'id'</span>: <span class="number">7L</span>, <span class="string">'name'</span>: <span class="string">u'name_3'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'4@qq.com'</span>, <span class="string">'id'</span>: <span class="number">8L</span>, <span class="string">'name'</span>: <span class="string">u'name_4'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'5@qq.com'</span>, <span class="string">'id'</span>: <span class="number">9L</span>, <span class="string">'name'</span>: <span class="string">u'name_5'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'6@qq.com'</span>, <span class="string">'id'</span>: <span class="number">10L</span>, <span class="string">'name'</span>: <span class="string">u'name_6'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'7@qq.com'</span>, <span class="string">'id'</span>: <span class="number">11L</span>, <span class="string">'name'</span>: <span class="string">u'name_7'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'8@qq.com'</span>, <span class="string">'id'</span>: <span class="number">12L</span>, <span class="string">'name'</span>: <span class="string">u'name_8'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'9@qq.com'</span>, <span class="string">'id'</span>: <span class="number">13L</span>, <span class="string">'name'</span>: <span class="string">u'name_9'</span>&#125;]</div></pre></td></tr></table></figure>
<ol>
<li>当不指定时, 修改之前定义的model. 去掉 <strong>public</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(db.Model, AutoSerialize)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'test'</span></div><div class="line">    <span class="comment"># __public__ = ['id', 'name', 'email']</span></div><div class="line"> </div><div class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>, autoincrement=<span class="keyword">True</span>)</div><div class="line">    name = db.Column(db.String(<span class="number">100</span>), nullable=<span class="keyword">False</span>)</div><div class="line">    email = db.Column(db.String(<span class="number">100</span>), nullable=<span class="keyword">False</span>, unique=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;Test %r&gt;'</span> % self.name</div></pre></td></tr></table></figure>
<p>重新测试, 同样会遍历出所有字段</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">In [1]: [ x.to_json() for x in Test.query.all() ]</div><div class="line">Out[1]: </div><div class="line">[&#123;&apos;id&apos;: 1L, &apos;name&apos;: u&apos;name_1&apos;&#125;,</div><div class="line"> &#123;&apos;email&apos;: u&apos;%s@qq.com&apos;, &apos;id&apos;: 3L, &apos;name&apos;: u&apos;name_1&apos;&#125;,</div><div class="line"> &#123;&apos;email&apos;: u&apos;1@qq.com&apos;, &apos;id&apos;: 5L, &apos;name&apos;: u&apos;name_1&apos;&#125;,</div><div class="line"> &#123;&apos;email&apos;: u&apos;2@qq.com&apos;, &apos;id&apos;: 6L, &apos;name&apos;: u&apos;name_2&apos;&#125;,</div><div class="line"> &#123;&apos;email&apos;: u&apos;3@qq.com&apos;, &apos;id&apos;: 7L, &apos;name&apos;: u&apos;name_3&apos;&#125;,</div><div class="line"> &#123;&apos;email&apos;: u&apos;4@qq.com&apos;, &apos;id&apos;: 8L, &apos;name&apos;: u&apos;name_4&apos;&#125;,</div><div class="line"> &#123;&apos;email&apos;: u&apos;5@qq.com&apos;, &apos;id&apos;: 9L, &apos;name&apos;: u&apos;name_5&apos;&#125;,</div><div class="line"> &#123;&apos;email&apos;: u&apos;6@qq.com&apos;, &apos;id&apos;: 10L, &apos;name&apos;: u&apos;name_6&apos;&#125;,</div><div class="line"> &#123;&apos;email&apos;: u&apos;7@qq.com&apos;, &apos;id&apos;: 11L, &apos;name&apos;: u&apos;name_7&apos;&#125;,</div><div class="line"> &#123;&apos;email&apos;: u&apos;8@qq.com&apos;, &apos;id&apos;: 12L, &apos;name&apos;: u&apos;name_8&apos;&#125;,</div><div class="line"> &#123;&apos;email&apos;: u&apos;9@qq.com&apos;, &apos;id&apos;: 13L, &apos;name&apos;: u&apos;name_9&apos;&#125;]</div></pre></td></tr></table></figure>
<p>我们在查询的时候, 也可以指定排除的字段exclude, 或者仅包含指定的字段only</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">2</span>]: [ x.to_json(exclude=[<span class="string">'id'</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> Test.query.all() ] </div><div class="line">Out[<span class="number">2</span>]: </div><div class="line">[&#123;<span class="string">'name'</span>: <span class="string">u'name_1'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'%s@qq.com'</span>, <span class="string">'name'</span>: <span class="string">u'name_1'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'1@qq.com'</span>, <span class="string">'name'</span>: <span class="string">u'name_1'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'2@qq.com'</span>, <span class="string">'name'</span>: <span class="string">u'name_2'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'3@qq.com'</span>, <span class="string">'name'</span>: <span class="string">u'name_3'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'4@qq.com'</span>, <span class="string">'name'</span>: <span class="string">u'name_4'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'5@qq.com'</span>, <span class="string">'name'</span>: <span class="string">u'name_5'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'6@qq.com'</span>, <span class="string">'name'</span>: <span class="string">u'name_6'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'7@qq.com'</span>, <span class="string">'name'</span>: <span class="string">u'name_7'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'8@qq.com'</span>, <span class="string">'name'</span>: <span class="string">u'name_8'</span>&#125;,</div><div class="line"> &#123;<span class="string">'email'</span>: <span class="string">u'9@qq.com'</span>, <span class="string">'name'</span>: <span class="string">u'name_9'</span>&#125;]</div><div class="line"> </div><div class="line">In [<span class="number">3</span>]: [ x.to_json(only=[<span class="string">'name'</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> Test.query.all() ]                  </div><div class="line">Out[<span class="number">3</span>]: </div><div class="line">[&#123;<span class="string">'name'</span>: <span class="string">u'name_1'</span>&#125;,</div><div class="line"> &#123;<span class="string">'name'</span>: <span class="string">u'name_1'</span>&#125;,</div><div class="line"> &#123;<span class="string">'name'</span>: <span class="string">u'name_1'</span>&#125;,</div><div class="line"> &#123;<span class="string">'name'</span>: <span class="string">u'name_2'</span>&#125;,</div><div class="line"> &#123;<span class="string">'name'</span>: <span class="string">u'name_3'</span>&#125;,</div><div class="line"> &#123;<span class="string">'name'</span>: <span class="string">u'name_4'</span>&#125;,</div><div class="line"> &#123;<span class="string">'name'</span>: <span class="string">u'name_5'</span>&#125;,</div><div class="line"> &#123;<span class="string">'name'</span>: <span class="string">u'name_6'</span>&#125;,</div><div class="line"> &#123;<span class="string">'name'</span>: <span class="string">u'name_7'</span>&#125;,</div><div class="line"> &#123;<span class="string">'name'</span>: <span class="string">u'name_8'</span>&#125;,</div><div class="line"> &#123;<span class="string">'name'</span>: <span class="string">u'name_9'</span>&#125;]</div></pre></td></tr></table></figure>
<p>当然可以根据自己的需求, 去修改序列化的基类. 上面定义的基类, 在逻辑判断中没有考虑指定多个条件时的情况, 所以根据自己的需求, 自己修改;</p>
<p>题外话, 当我们model中有定义外键的时候, 那序列化的字段, 就会变成引用表的id值(通常是这样的)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">elif</span> BaseModelMixin <span class="keyword">in</span> value.__class__.__bases__ <span class="keyword">or</span> SerializeMixin <span class="keyword">in</span> value.__class__.__bases__:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        ret = value._get_public()</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>而处理的方式就在上面, 直接或者引用表的的’_get_public’方法, 而当没有定义的时候, 在就取默认值了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在flask开发运维后台的时候, 比较多的需求是, 从数据库取得结果, 需要序列化之后传递给前端的表格插件.&lt;/p&gt;
&lt;p&gt;下面我们创建一个基类, 在定义model的时候, 继承就可以达到想要的结果了&lt;/p&gt;
    
    </summary>
    
      <category term="flask" scheme="https://yoncan.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://yoncan.github.io/tags/flask/"/>
    
      <category term="sqlalchemy" scheme="https://yoncan.github.io/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>运维后台资产管理的变更和备注记录功能</title>
    <link href="https://yoncan.github.io/blog/2016/07/yunwei-cmdb.html"/>
    <id>https://yoncan.github.io/blog/2016/07/yunwei-cmdb.html</id>
    <published>2016-07-03T16:27:30.000Z</published>
    <updated>2017-01-09T16:31:45.529Z</updated>
    
    <content type="html"><![CDATA[<p>前端太菜了,花了两天时间才弄好. 看来还得好好的学css</p>
<p><img src="/assert/images/2016-07-04-yunwei-cmdb/11.jpg" alt="后台的架构图"><br><a id="more"></a><br><img src="/assert/images/2016-07-04-yunwei-cmdb/22.jpg" alt="后台的架构图"><br><img src="/assert/images/2016-07-04-yunwei-cmdb/33.jpg" alt="后台的架构图"><br><img src="/assert/images/2016-07-04-yunwei-cmdb/44.jpg" alt="后台的架构图"><br><img src="/assert/images/2016-07-04-yunwei-cmdb/44.jpg" alt="后台的架构图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端太菜了,花了两天时间才弄好. 看来还得好好的学css&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assert/images/2016-07-04-yunwei-cmdb/11.jpg&quot; alt=&quot;后台的架构图&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="flask" scheme="https://yoncan.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://yoncan.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Ansible 2.0 最新版本的API封装</title>
    <link href="https://yoncan.github.io/blog/2016/03/ansible-api.html"/>
    <id>https://yoncan.github.io/blog/2016/03/ansible-api.html</id>
    <published>2016-03-05T16:24:10.000Z</published>
    <updated>2017-01-17T14:00:43.828Z</updated>
    
    <content type="html"><![CDATA[<p>ansible 2.0之后的api变更了, 下面是封装好了2.0之后的api使用方法</p>
<p>具体的使用, 方法内有案例. 如果看过ansible的源码, 就可以容易理解这个API的封装. 其中要说的是 self.options 这个.  这个是构建命令行参数的, 当我们使用命令行上去执行指令ansible -i /etc/ansible/hosts localhost -m ping 时, 虽然只带了-i 和 -m 指定模块, 但是有很多默认值. 最终的所有参数的设置, 都是附加到self.options的</p>
<p>想去了解ansible API的同学, 建议去 自己分析下源码 /usr/lib/python2.6/site-packages/ansible/cli/adhoc.py; 就很容易明白了</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># Author: Ycan</span></div><div class="line"><span class="comment"># More: http://www.ehco.me/</span></div><div class="line"><span class="comment"># Ansible API</span></div><div class="line"><span class="comment"># Ansible Version &gt;=2.0</span></div><div class="line"> </div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> (absolute_import, division, print_function)</div><div class="line"> </div><div class="line"><span class="keyword">from</span> ansible.executor.task_queue_manager <span class="keyword">import</span> TaskQueueManager</div><div class="line"><span class="keyword">from</span> ansible.inventory <span class="keyword">import</span> Inventory</div><div class="line"><span class="keyword">from</span> ansible.parsing.dataloader <span class="keyword">import</span> DataLoader</div><div class="line"><span class="keyword">from</span> ansible.vars <span class="keyword">import</span> VariableManager</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"><span class="keyword">from</span> ansible.playbook.play <span class="keyword">import</span> Play</div><div class="line"><span class="keyword">from</span> ansible <span class="keyword">import</span> constants <span class="keyword">as</span> C</div><div class="line"><span class="keyword">from</span> ansible.parsing.splitter <span class="keyword">import</span> parse_kv</div><div class="line"><span class="keyword">from</span> ansible.executor.playbook_executor <span class="keyword">import</span> PlaybookExecutor</div><div class="line"><span class="keyword">from</span> ansible.utils.vars <span class="keyword">import</span> load_extra_vars</div><div class="line"><span class="keyword">import</span> os</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoGoAnsibleEorror</span><span class="params">(Exception)</span>:</span> <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoGoMinix</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">""" 列出一些基础的options</span></div><div class="line">    subset: '127.0.0.1'</div><div class="line">    extra_vars: ["name='yagcan'"] 或者 json格式也可以</div><div class="line">    tags: "test,test01"</div><div class="line">    """</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, inventory_file=None, passwords=None, verbosity=<span class="number">0</span>, cb=<span class="string">'minimal'</span>)</span>:</span></div><div class="line"> </div><div class="line">        <span class="keyword">if</span> passwords <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            passwords = &#123;<span class="string">'conn_pass'</span>: <span class="string">''</span>, <span class="string">'become_pass'</span>: <span class="string">''</span>&#125;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> inventory_file <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            inventory_file = C.DEFAULT_HOST_LIST</div><div class="line"> </div><div class="line">        self.verbosity = verbosity</div><div class="line">        self.inventory_file = inventory_file</div><div class="line"> </div><div class="line">        self.passwords = passwords</div><div class="line"> </div><div class="line">        self.cb = cb</div><div class="line"> </div><div class="line">        self._set_option = <span class="keyword">False</span></div><div class="line">        self._set_hosts = <span class="keyword">False</span></div><div class="line"> </div><div class="line">        <span class="comment"># initialize needed objects</span></div><div class="line">        self.variable_manager = VariableManager()</div><div class="line"> </div><div class="line">        self.loader = DataLoader()</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_base_option</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" base option"""</span></div><div class="line">        <span class="keyword">return</span> dict(</div><div class="line">            connection=C.DEFAULT_TRANSPORT,</div><div class="line">            forks=C.DEFAULT_FORKS,</div><div class="line">            become=<span class="keyword">False</span>,</div><div class="line">            become_method=C.DEFAULT_BECOME_METHOD,</div><div class="line">            become_user=<span class="keyword">None</span>,</div><div class="line">            check=<span class="keyword">False</span>,</div><div class="line">            module_path=<span class="keyword">None</span>,</div><div class="line">            remote_user=C.DEFAULT_REMOTE_USER,</div><div class="line">            private_key_file=C.DEFAULT_PRIVATE_KEY_FILE,</div><div class="line">            ssh_common_args=<span class="string">''</span>,</div><div class="line">            sftp_extra_args=<span class="string">''</span>,</div><div class="line">            scp_extra_args=<span class="string">''</span>,</div><div class="line">            ssh_extra_args=<span class="string">''</span>,</div><div class="line">            verbosity=self.verbosity,</div><div class="line">            listhosts=<span class="keyword">False</span>,</div><div class="line">            listtags=<span class="keyword">False</span>,</div><div class="line">            listtasks=<span class="keyword">False</span>,</div><div class="line">            syntax=<span class="keyword">False</span>,</div><div class="line">            inventory=<span class="keyword">None</span></div><div class="line">        )</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">limit_hosts</span><span class="params">(self, host_lists)</span>:</span></div><div class="line">        <span class="comment"># --limit</span></div><div class="line">        self._set_hosts = <span class="keyword">True</span></div><div class="line"> </div><div class="line">        self.host_lists = host_lists</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> isinstance(host_lists, list):</div><div class="line">            self.host_lists = <span class="string">','</span>.join(host_lists)</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_option</span><span class="params">(self, **kwargs)</span>:</span></div><div class="line">        <span class="string">""" set Options</span></div><div class="line">        usage:</div><div class="line">            base_option = self._base_option()</div><div class="line">            _option = base_option.copy()</div><div class="line">            _option.upadte(&#123;'verbosity': 1, 'forks': 20&#125;)</div><div class="line">            self.set_option(**_option)</div><div class="line">        """</div><div class="line"> </div><div class="line">        self._set_option = <span class="keyword">True</span></div><div class="line"> </div><div class="line">        self.options = self._options(**kwargs)</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_options</span><span class="params">(self, **kwargs)</span>:</span></div><div class="line">        <span class="string">""" set options</span></div><div class="line">        """</div><div class="line">        keys = kwargs.keys()</div><div class="line">        Options = namedtuple(<span class="string">'Options'</span>, keys)</div><div class="line">        v = Options(**kwargs)</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> v.inventory <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            self.inventory_file = v.inventory</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> v</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_prepare_run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># initialize needed objects</span></div><div class="line"> </div><div class="line">        <span class="comment"># when not set_option</span></div><div class="line">        <span class="keyword">if</span> self._set_option <span class="keyword">is</span> <span class="keyword">False</span>:</div><div class="line">            _base_option = self._base_option().copy()</div><div class="line">            self.options = self._options(**_base_option)</div><div class="line"> </div><div class="line">        self.inventory = Inventory(loader=self.loader, variable_manager=self.variable_manager,</div><div class="line">                                   host_list=self.inventory_file)</div><div class="line"> </div><div class="line">        self.variable_manager.set_inventory(self.inventory)</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> self._set_hosts:</div><div class="line">            self.inventory.subset(self.host_lists)</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> len(self.inventory.list_hosts()) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> DoGoAnsibleEorror(<span class="string">u'match any hosts empty..'</span>)</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, play_data)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoGoAdHocCLI</span><span class="params">(DoGoMinix)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        <span class="string">""" 案例:</span></div><div class="line">        adh = DoGoAdHocCLI(inventory_file='/etc/ansible/hosts')</div><div class="line">        _base_options = adh._base_option()</div><div class="line">        options = _base_options.copy()</div><div class="line">        options.update(&#123;</div><div class="line">            'inventory': '/etc/ansible/hosts',</div><div class="line">            'forks': 10</div><div class="line">        &#125;)</div><div class="line">        adh.set_option(**options)</div><div class="line"> </div><div class="line">        play_data = dict(</div><div class="line">            name="DoGo CMDB gather facts",</div><div class="line">            hosts=['localhost'],</div><div class="line">            gather_facts=True,</div><div class="line">            tasks=[dict(action=dict(module='setup'))]</div><div class="line">        )</div><div class="line">        return adh.run(play_data)</div><div class="line"> </div><div class="line">        """</div><div class="line"> </div><div class="line">        super(DoGoAdHocCLI, self).__init__(*args, **kwargs)</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, play_data)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        play_data = dict(</div><div class="line">            name="Ansible Ad-Hoc",</div><div class="line">            hosts=pattern,</div><div class="line">            gather_facts=True,</div><div class="line">            tasks=[dict(action=dict(module='service', args=&#123;'name': 'vsftpd', 'state': 'restarted'&#125;), async=async, poll=poll)]</div><div class="line">        )</div><div class="line">        """</div><div class="line">        self._prepare_run()</div><div class="line"> </div><div class="line">        play = Play().load(play_data, variable_manager=self.variable_manager, loader=self.loader)</div><div class="line"> </div><div class="line">        tqm = <span class="keyword">None</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            tqm = TaskQueueManager(</div><div class="line">                inventory=self.inventory,</div><div class="line">                variable_manager=self.variable_manager,</div><div class="line">                loader=self.loader,</div><div class="line">                options=self.options,</div><div class="line">                passwords=self.passwords,</div><div class="line">                stdout_callback=self.cb,</div><div class="line">                run_additional_callbacks=C.DEFAULT_LOAD_CALLBACK_PLUGINS,</div><div class="line">                run_tree=<span class="keyword">False</span>,</div><div class="line">            )</div><div class="line"> </div><div class="line">            result = tqm.run(play)</div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            <span class="keyword">if</span> tqm:</div><div class="line">                tqm.cleanup()</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoGoPlaybookCLI</span><span class="params">(DoGoMinix)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        <span class="string">""" example:</span></div><div class="line">            play_book = get_ansible_task_file('task_rsync.yml')</div><div class="line"> </div><div class="line">            forks = len(host_list)</div><div class="line">            if forks == 0:</div><div class="line">                raise ValueError('host_list empty....')</div><div class="line"> </div><div class="line">            if forks &gt; 10: forks = 10</div><div class="line"> </div><div class="line">            pb = DoGoPlaybookCLI(inventory_file='/etc/ansible/hosts', cb='skippy')</div><div class="line"> </div><div class="line">            _base_options = pb._base_option()</div><div class="line">            options = _base_options.copy()</div><div class="line">            options.update(&#123;</div><div class="line">                'inventory': '/etc/ansible/hosts',</div><div class="line">                'forks': forks,</div><div class="line">                'tags': 'add_rsync_module',</div><div class="line">                'subset': ','.join(host_list),</div><div class="line">                'extra_vars': [json.dumps(&#123;'module': module&#125;)]</div><div class="line">            &#125;)</div><div class="line">            pb.set_option(**options)</div><div class="line"> </div><div class="line">            pb.limit_hosts(','.join(host_list))</div><div class="line"> </div><div class="line">            if not os.path.isfile(play_book):</div><div class="line">                raise OSError('task file &#123;0&#125; not found!'.format(play_book))</div><div class="line"> </div><div class="line">            kw = &#123;'playbooks': [play_book]&#125;</div><div class="line">            return pb.run(**kw)</div><div class="line"> </div><div class="line">        """</div><div class="line"> </div><div class="line">        super(DoGoPlaybookCLI, self).__init__(*args, **kwargs)</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, playbooks)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        param: `playbooks`: type string or list, example: ['/etc/ansible/test.yml'], '/etc/ansible/test1.yml, /etc/ansible/test2.yml'</div><div class="line">        param: `limit`:  eq --limit ''</div><div class="line">        """</div><div class="line">        self._prepare_run()</div><div class="line">        self.variable_manager.extra_vars = load_extra_vars(loader=self.loader, options=self.options)</div><div class="line"> </div><div class="line">        results = <span class="number">0</span></div><div class="line"> </div><div class="line">        <span class="keyword">if</span> isinstance(playbooks, basestring):</div><div class="line">            <span class="keyword">if</span> <span class="string">','</span> <span class="keyword">in</span> playbooks:</div><div class="line">                playbooks = [pl.strip() <span class="keyword">for</span> pl <span class="keyword">in</span> playbooks.split(<span class="string">','</span>) <span class="keyword">if</span> os.path.exists(pl)]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                playbooks = [playbooks] <span class="keyword">if</span> os.path.exists(playbooks) <span class="keyword">else</span> []</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> len(playbooks) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> DoGoAnsibleEorror(<span class="string">u'&#123;0&#125; invalid'</span>.format(playbooks))</div><div class="line"> </div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># create the playbook executor, which manages running the plays via a task queue manager</span></div><div class="line">            pbex = PlaybookExecutor(playbooks=playbooks, inventory=self.inventory,</div><div class="line">                                    variable_manager=self.variable_manager,</div><div class="line">                                    loader=self.loader, options=self.options, passwords=self.passwords)</div><div class="line"> </div><div class="line">            results = pbex.run()</div><div class="line">        <span class="keyword">except</span> Exception, ex:</div><div class="line">            results = str(ex)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            <span class="keyword">return</span> results</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_setup</span><span class="params">(host_list=[])</span>:</span></div><div class="line">    <span class="comment"># 测试setup模块</span></div><div class="line">    <span class="keyword">if</span> host_list:</div><div class="line">        adh = DoGoAdHocCLI(inventory_file=<span class="string">'/etc/ansible/hosts'</span>)</div><div class="line">        _base_options = adh._base_option()</div><div class="line">        options = _base_options.copy()</div><div class="line">        options.update(&#123;</div><div class="line">            <span class="string">'inventory'</span>: <span class="string">'/etc/ansible/hosts'</span></div><div class="line">        &#125;)</div><div class="line">        adh.set_option(**options)</div><div class="line"> </div><div class="line">        play_data = dict(</div><div class="line">            name=<span class="string">"DoGo CMDB gather facts"</span>,</div><div class="line">            hosts=host_list,</div><div class="line">            gather_facts=<span class="keyword">True</span>,</div><div class="line">            tasks=[dict(action=dict(module=<span class="string">'setup'</span>))]</div><div class="line">        )</div><div class="line">        <span class="keyword">return</span> adh.run(play_data)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    test_setup(host_list=[<span class="string">'127.0.0.1'</span>])</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ansible 2.0之后的api变更了, 下面是封装好了2.0之后的api使用方法&lt;/p&gt;
&lt;p&gt;具体的使用, 方法内有案例. 如果看过ansible的源码, 就可以容易理解这个API的封装. 其中要说的是 self.options 这个.  这个是构建命令行参数的, 当我们使用命令行上去执行指令ansible -i /etc/ansible/hosts localhost -m ping 时, 虽然只带了-i 和 -m 指定模块, 但是有很多默认值. 最终的所有参数的设置, 都是附加到self.options的&lt;/p&gt;
&lt;p&gt;想去了解ansible API的同学, 建议去 自己分析下源码 /usr/lib/python2.6/site-packages/ansible/cli/adhoc.py; 就很容易明白了&lt;/p&gt;
    
    </summary>
    
      <category term="ansible" scheme="https://yoncan.github.io/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://yoncan.github.io/tags/ansible/"/>
    
      <category term="api" scheme="https://yoncan.github.io/tags/api/"/>
    
  </entry>
  
</feed>
