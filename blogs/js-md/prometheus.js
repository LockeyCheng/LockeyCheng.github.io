var prometheus ={
	'prometheus-1-introduction':{
		'title':'Introduction of Prometheus',
		'content':"**本系列文章不赘述官网中的一些无关紧要的内容**\n\n官方文档：https://prometheus.io/docs/introduction/overview/\n\n### 什么是Prometheus \n\n**Prometheus is an open-source systems monitoring and alerting toolkit.（开源的系统监控和报警套件）**\n\n### 特性（Features）\n- a multi-dimensional data model with time series data identified by metric name and key/value pairs（带有时间序列数据的多维数据模型，由指标名称和键值对标记）\n- a flexible query language to leverage this dimensionality（灵活的查询语言获取维度信息）\n- no reliance on distributed storage; single server nodes are autonomous（无分布式存储依赖，自治的单一服务节点）\n- time series collection happens via a pull model over HTTP（使用http协议的pull模式实现时间序列数据采集）\n- pushing time series is supported via an intermediary gateway（时间序列推送由中间接口支持）\n- targets are discovered via service discovery or static configuration（可自动发现或者静态配置的目标端点）\n- multiple modes of graphing and dashboarding support（混合图形模型和面板支持）\n\n### 组件（Components）\n**The Prometheus ecosystem consists of multiple components, many of which are optional:**\n\n- the main Prometheus server which scrapes and stores time series data（主服务抓取并存储时间序列数据）\n- client libraries for instrumenting application code（客户端库可用来检测应用代码）\n- a push gateway for supporting short-lived jobs（推送接口用来支持短期工作）\n- special-purpose exporters for services like HAProxy, StatsD, Graphite, etc.（特定用途的输出器，如HAProxy, StatsD, Graphite等）\n- an alertmanager to handle alerts（处理报警的alertmanager）\n- various support tools（对于各种工具的支持）\n### 架构（Architecture）\n![这里写图片描述](https://prometheus.io/assets/architecture.svg)\n\n对于上图做一下解释：\n\n\t左上：通过推送接口获取短活任务/服务的监控指标，然后由prometheus自动抓取\n\t左下：通过任务/输出器或者prometheus server暴露接口提供监控指标，然后由prometheus自动抓取\n\t中上：自动服务发现组件\n\t中下：prometheus服务器，实现服务发现、数据查询存储等功能\n\t右上：将prometheus推送过来的报警信息由alertmanager处理后发送到指定接收端\n\t右下：通过web端界面或者客户端获取数据进行展示，也可以提供服务配置、规则配置、报警接收等\n\n### prometheus适合什么时候使用（When does it fit?）\n\n\t适合记录单纯的数据时间序列，既适合机器中心的监控又适合高动态面向服务的架构。在微服务世界里，提供强有力的多维数据收集与查询 。\n\tPrometheus为可靠性而设计，使得我们能够在系统中断的时候快速诊断问题所在。每一台prometheus服务器都是独立的，不依赖于任何的网络存储或者远程服务，就算其他的部分基础设施down掉了你也可以依靠它，不需要搭建额外的基础设施去使用它。\n\n###  prometheus不适合什么时候使用（When does it not fit?）\n\n\tPrometheus重在可靠性，任何时候我们都可以查看系统的那些资料可用，即使在失败情况下。如果需要100%的准确性，例如对每一个请求的计费，Prometheus不是最好的选择，这种情况下你需要使用其它系统来收集和分析数据来计费，剩下的监控任务就交给prometheus。\n\n\n关于安装不赘述请参阅官网：\nhttps://prometheus.io/docs/introduction/first_steps/\n下篇将注重于配置解读\n",
		'date':'By LOCKEY on Jan 2, 2018'
	}
}